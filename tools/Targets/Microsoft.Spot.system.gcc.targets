<Project  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"  ToolsVersion="4.0">


  <PropertyGroup>
    <BuildToolName>GCC</BuildToolName>
    <BuildToolGuid>{722B0D5D-1243-4557-913F-61FAB04E9209}</BuildToolGuid>
    <Documentation></Documentation>
    <ProcessorTypes>XScale;ARM7TDMI;ARM7TDMI-S;arm920t;arm926EJ-S;SH2;SH2A;RX62N;RX63N;H8;RZA1</ProcessorTypes>
    <ISAs>arm;thumb;thumb2</ISAs>
  </PropertyGroup>

  <PropertyGroup Condition="'$(COMPILER_TOOL)'=='GCC'" >
    <TARGETCURRENT>$(SPO_BUILD)\$(INSTRUCTION_SET)\$(TARGETLOCATION)\$(OLD_FLAVOR)\$(TARGETPLATFORM)\bin</TARGETCURRENT>

    <!-- GNU Tools - Assumes that the Path is already set up to these tools (the default) -->
    
    <CC>"$(GNU_TOOLS_BIN)\$(GNU_TARGET)-gcc.exe"</CC>
    <TCC>"$(GNU_TOOLS_BIN)\$(GNU_TARGET)-gcc.exe"</TCC>
    <CPP>"$(GNU_TOOLS_BIN)\$(GNU_TARGET)-gcc.exe"</CPP>
    <TCPP>"$(GNU_TOOLS_BIN)\$(GNU_TARGET)-gcc.exe"</TCPP>
    <AS>"$(GNU_TOOLS_BIN)\$(GNU_TARGET)-as.exe"</AS>
    <LINK>"$(GNU_TOOLS_BIN)\$(GNU_TARGET)-ld.exe"</LINK>
    <AR>"$(GNU_TOOLS_BIN)\$(GNU_TARGET)-ar.exe"</AR>
    <NM>"$(GNU_TOOLS_BIN)\$(GNU_TARGET)-nm.exe"</NM>
    <FROMELF>"$(GNU_TOOLS_BIN)\$(GNU_TARGET)-objcopy.exe"</FROMELF>
    <OBJDUMP>"$(GNU_TOOLS_BIN)\$(GNU_TARGET)-objdump.exe"</OBJDUMP>
    <RANLIB>"$(GNU_TOOLS_BIN)\$(GNU_TARGET)-ranlib.exe"</RANLIB>
    <CREATESYMDEF>$(TOOLS_DIR)\CreateSymdef.exe</CREATESYMDEF>
    <CREATESYMDEF_ALT>$(SPOCLIENT)\TOOLS\BIN\CreateSymdef.exe</CREATESYMDEF_ALT>

    <!-- alternate location for tool binaries -->
    <AS      Condition="!EXISTS('$(AS)')"     >"$(GNU_TOOLS_BIN)\..\$(GNU_TARGET)\bin\as.exe"</AS>
    <LINK    Condition="!EXISTS('$(LINK)')"   >"$(GNU_TOOLS_BIN)\..\$(GNU_TARGET)\bin\ld.exe"</LINK>
    <AR      Condition="!EXISTS('$(AR)')"     >"$(GNU_TOOLS_BIN)\..\$(GNU_TARGET)\bin\ar.exe"</AR>
    <NM      Condition="!EXISTS('$(NM)')"     >"$(GNU_TOOLS_BIN)\..\$(GNU_TARGET)\bin\nm.exe"</NM>
    <FROMELF Condition="!EXISTS('$(FROMELF)')">"$(GNU_TOOLS_BIN)\..\$(GNU_TARGET)\bin\objcopy.exe"</FROMELF>
    <OBJDUMP Condition="!EXISTS('$(OBJDUMP)')">"$(GNU_TOOLS_BIN)\..\$(GNU_TARGET)\bin\objdump.exe"</OBJDUMP>
    <RANLIB  Condition="!EXISTS('$(RANLIB)')" >"$(GNU_TOOLS_BIN)\..\$(GNU_TARGET)\bin\ranlib.exe"</RANLIB>
  </PropertyGroup>


  <!-- based on cpu type, setup compiler-->  
  
  <PropertyGroup>
    <!-- We need to convert the RVDS CPU type to its GCC equivalent if needed-->
    <ARM_TYPE_FLAGS Condition="'$(DEVICE_TYPE)' == 'arm926EJ-S'">arm926ej-s</ARM_TYPE_FLAGS>
    <ARM_TYPE_FLAGS Condition="'$(DEVICE_TYPE)' == 'ARM7TDMI'">arm7tdmi</ARM_TYPE_FLAGS>
    <ARM_TYPE_FLAGS Condition="'$(DEVICE_TYPE)' == 'Cortex-M4.fp'">cortex-m3</ARM_TYPE_FLAGS>
    <ARM_TYPE_FLAGS Condition="'$(DEVICE_TYPE)' == 'rza1'">cortex-a9</ARM_TYPE_FLAGS>
    <ARM_TYPE_FLAGS Condition="'$(ARM_TYPE_FLAGS)'==''">$(DEVICE_TYPE)</ARM_TYPE_FLAGS>

    <POS_DEPENDENT></POS_DEPENDENT>
    <POS_INDEPENDENT>-fpic</POS_INDEPENDENT>
    <!-- <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) -mabi=aapcs -ffunction-sections -fomit-frame-pointer -mlong-calls -fdollars-in-identifiers -fshort-wchar -fno-exceptions  -funsigned-char -mstructure-size-boundary=8</CC_CPP_COMMON_FLAGS> -->
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='arm'"      >$(CC_CPP_COMMON_FLAGS) -mabi=aapcs -ffunction-sections -fomit-frame-pointer -mlong-calls -fdollars-in-identifiers -fshort-wchar -fno-exceptions  -funsigned-char -mstructure-size-boundary=8</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb'"    >$(CC_CPP_COMMON_FLAGS) -mabi=aapcs -ffunction-sections -fomit-frame-pointer -mlong-calls -fdollars-in-identifiers -fshort-wchar -fno-exceptions  -funsigned-char -mstructure-size-boundary=8</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2'"   >$(CC_CPP_COMMON_FLAGS) -mabi=aapcs -ffunction-sections -fomit-frame-pointer -mlong-calls -fdollars-in-identifiers -fshort-wchar -fno-exceptions  -funsigned-char -mstructure-size-boundary=8</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2fp'" >$(CC_CPP_COMMON_FLAGS) -mabi=aapcs -ffunction-sections -fomit-frame-pointer -mlong-calls -fdollars-in-identifiers -fshort-wchar -fno-exceptions  -funsigned-char -mstructure-size-boundary=8</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='sh2'"      >$(CC_CPP_COMMON_FLAGS)             -ffunction-sections -fomit-frame-pointer              -fdollars-in-identifiers -fshort-wchar -fno-exceptions  -funsigned-char</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='sh2a'"     >$(CC_CPP_COMMON_FLAGS) -m2a                            -fomit-frame-pointer              -fdollars-in-identifiers -fshort-wchar -fno-exceptions  -funsigned-char</CC_CPP_COMMON_FLAGS>
<!--
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rx62n'"    >$(CC_CPP_COMMON_FLAGS) -mcpu=rx600                                                       -fdollars-in-identifiers -fshort-wchar -fno-exceptions  -funsigned-char -fno-leading-underscore</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rx63n'"    >$(CC_CPP_COMMON_FLAGS) -mcpu=rx600                                                       -fdollars-in-identifiers -fshort-wchar -fno-exceptions  -funsigned-char -fno-leading-underscore</CC_CPP_COMMON_FLAGS>
-->
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rx62n'"    >$(CC_CPP_COMMON_FLAGS) -mcpu=rx600                                                       -fdollars-in-identifiers -fshort-wchar -fno-exceptions  -funsigned-char</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rx63n'"    >$(CC_CPP_COMMON_FLAGS) -mcpu=rx600                                                       -fdollars-in-identifiers -fshort-wchar -fno-exceptions  -funsigned-char</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rza1'"     >$(CC_CPP_COMMON_FLAGS)                                                                   -fdollars-in-identifiers -fshort-wchar -fno-exceptions  -funsigned-char</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rza1'"     >$(CC_CPP_COMMON_FLAGS) -fno-strict-aliasing -fno-rtti -fno-exceptions -fno-delete-null-pointer-checks -fmessage-length=0 -fno-builtin -mno-unaligned-access</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='h8'"       >$(CC_CPP_COMMON_FLAGS) -mh -mint32 -ffunction-sections                                   -fdollars-in-identifiers -fshort-wchar -fno-exceptions  -funsigned-char</CC_CPP_COMMON_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='RTM'"          >$(CC_CPP_TARGETTYPE_FLAGS) -O3</CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Debug'"        >$(CC_CPP_TARGETTYPE_FLAGS) -g -O0 -femit-class-debug-always</CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Instrumented'" >$(CC_CPP_TARGETTYPE_FLAGS) -g -O0</CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Release'"      >$(CC_CPP_TARGETTYPE_FLAGS) -g1 -Os</CC_CPP_TARGETTYPE_FLAGS>

    <CC_FLAGS>$(CC_FLAGS)-xc -std=gnu99</CC_FLAGS>
    <CPP_FLAGS>$(CPP_FLAGS)-xc++ -Wno-invalid-offsetof -fcheck-new </CPP_FLAGS>

    <!-- <FLOATING_POINT_FLAG Condition="'$(PLATFORM_EMULATED_FLOATINGPOINT)'!='true'"> -mfloat-abi=soft </FLOATING_POINT_FLAG> -->
    <FLOATING_POINT_FLAG Condition="'$(INSTRUCTION_SET)'=='arm'    and'$(PLATFORM_EMULATED_FLOATINGPOINT)'!='true'"> -mfloat-abi=soft </FLOATING_POINT_FLAG>
    <FLOATING_POINT_FLAG Condition="'$(INSTRUCTION_SET)'=='thumb'  and'$(PLATFORM_EMULATED_FLOATINGPOINT)'!='true'"> -mfloat-abi=soft </FLOATING_POINT_FLAG>
    <FLOATING_POINT_FLAG Condition="'$(INSTRUCTION_SET)'=='thumb2' and'$(PLATFORM_EMULATED_FLOATINGPOINT)'!='true'"> -mfloat-abi=soft </FLOATING_POINT_FLAG>
    <FLOATING_POINT_FLAG Condition="'$(INSTRUCTION_SET)'=='thumb2fp' and'$(PLATFORM_EMULATED_FLOATINGPOINT)'!='true'"> -mfloat-abi=soft </FLOATING_POINT_FLAG>
    <FLOATING_POINT_FLAG Condition="'$(INSTRUCTION_SET)'=='rza1'  and'$(PLATFORM_EMULATED_FLOATINGPOINT)'!='true'"> -mfloat-abi=softfp -march=armv7-a -mfpu=neon </FLOATING_POINT_FLAG>
    <FLOATING_POINT_FLAG Condition="'$(PLATFORM_EMULATED_FLOATINGPOINT)'=='true'"> </FLOATING_POINT_FLAG>

    <AS_CC_CPP_COMMON_FLAGS Condition="'$(COMPILER_TOOL)'!='GCCOP'">$(AS_CC_CPP_COMMON_FLAGS) $(FLOATING_POINT_FLAG) </AS_CC_CPP_COMMON_FLAGS>
    <!--
    <AS_CC_CPP_COMMON_FLAGS>$(AS_CC_CPP_COMMON_FLAGS) -mcpu=$(ARM_TYPE_FLAGS)</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(ENDIANNESS)'=='le'">$(AS_CC_CPP_COMMON_FLAGS) -mlittle-endian</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(ENDIANNESS)'=='be'">$(AS_CC_CPP_COMMON_FLAGS) -mbig-endian</AS_CC_CPP_COMMON_FLAGS>
    -->
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='arm'"    >$(AS_CC_CPP_COMMON_FLAGS) -mcpu=$(ARM_TYPE_FLAGS)</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb'"  >$(AS_CC_CPP_COMMON_FLAGS) -mcpu=$(ARM_TYPE_FLAGS)</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2'" >$(AS_CC_CPP_COMMON_FLAGS) -mcpu=$(ARM_TYPE_FLAGS)</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2fp'" >$(AS_CC_CPP_COMMON_FLAGS) -mcpu=$(ARM_TYPE_FLAGS)</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rza1'" >$(AS_CC_CPP_COMMON_FLAGS) -mcpu=$(ARM_TYPE_FLAGS)</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='arm'    and '$(ENDIANNESS)'=='le'">$(AS_CC_CPP_COMMON_FLAGS) -mlittle-endian</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='arm'    and '$(ENDIANNESS)'=='be'">$(AS_CC_CPP_COMMON_FLAGS) -mbig-endian</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb'  and '$(ENDIANNESS)'=='le'">$(AS_CC_CPP_COMMON_FLAGS) -mlittle-endian</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb'  and '$(ENDIANNESS)'=='be'">$(AS_CC_CPP_COMMON_FLAGS) -mbig-endian</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2' and '$(ENDIANNESS)'=='le'">$(AS_CC_CPP_COMMON_FLAGS) -mlittle-endian</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2' and '$(ENDIANNESS)'=='be'">$(AS_CC_CPP_COMMON_FLAGS) -mbig-endian</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2fp' and '$(ENDIANNESS)'=='le'">$(AS_CC_CPP_COMMON_FLAGS) -mlittle-endian</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2fp' and '$(ENDIANNESS)'=='be'">$(AS_CC_CPP_COMMON_FLAGS) -mbig-endian</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='sh2'    and '$(ENDIANNESS)'=='le'">$(AS_CC_CPP_COMMON_FLAGS) -ml </AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='sh2'    and '$(ENDIANNESS)'=='be'">$(AS_CC_CPP_COMMON_FLAGS) </AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='sh2a'   and '$(ENDIANNESS)'=='le'">$(AS_CC_CPP_COMMON_FLAGS) -ml </AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='sh2a'   and '$(ENDIANNESS)'=='be'">$(AS_CC_CPP_COMMON_FLAGS) </AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rx62n'  and '$(ENDIANNESS)'=='le'">$(AS_CC_CPP_COMMON_FLAGS) -mlittle-endian-data </AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rx62n'  and '$(ENDIANNESS)'=='be'">$(AS_CC_CPP_COMMON_FLAGS) -mbig-endian-data </AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rx63n'  and '$(ENDIANNESS)'=='le'">$(AS_CC_CPP_COMMON_FLAGS) -mlittle-endian-data </AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rx63n'  and '$(ENDIANNESS)'=='be'">$(AS_CC_CPP_COMMON_FLAGS) -mbig-endian-data </AS_CC_CPP_COMMON_FLAGS>
  </PropertyGroup>


  <!-- Assembler flags -->
  <PropertyGroup>

    <AS_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='RTM'"         >$(AS_TARGETTYPE_FLAGS) --defsym BUILD_RTM=1</AS_TARGETTYPE_FLAGS>
    <AS_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Release'"     >$(AS_TARGETTYPE_FLAGS) --defsym BUILD_RTM=0 </AS_TARGETTYPE_FLAGS>
    <AS_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Debug'"       >$(AS_TARGETTYPE_FLAGS) --defsym BUILD_RTM=0 -g</AS_TARGETTYPE_FLAGS>
    <AS_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Instrumented'">$(AS_TARGETTYPE_FLAGS) --defsym BUILD_RTM=0 -g</AS_TARGETTYPE_FLAGS>

    <!-- Adjust the compiler/assembler flags according to the settings -->
    <AS_FLAGS Condition="'$(sampleprof)'=='true'" >$(AS_FLAGS) --defsym FIQ_SAMPLING_PROFILER=1</AS_FLAGS>
    <AS_FLAGS Condition="'$(latencyprof)'=='true'">$(AS_FLAGS) --defsym FIQ_LATENCY_PROFILER=1</AS_FLAGS>
    <AS_FLAGS Condition="'$(INSTRUCTION_SET)'=='arm'"     >$(AS_FLAGS) --defsym COMPILE_ARM=1</AS_FLAGS>
    <AS_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb' and '$(COMPILER_TOOL)'=='GCCOP'">$(AS_FLAGS) --defsym COMPILE_THUMB=1 -mthumb</AS_FLAGS>
    <AS_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb' and '$(COMPILER_TOOL)'!='GCCOP'">$(AS_FLAGS) --defsym COMPILE_THUMB=1 -mthumb-interwork</AS_FLAGS>
    <AS_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2'"  >$(AS_FLAGS) --defsym COMPILE_THUMB2=1 -mthumb</AS_FLAGS>
    <AS_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2fp'">$(AS_FLAGS) --defsym COMPILE_THUMB2=1 -mthumb</AS_FLAGS>
    <AS_FLAGS Condition="'$(INSTRUCTION_SET)'=='rza1'">$(AS_FLAGS) -mimplicit-it=thumb </AS_FLAGS>

    <!-- Assembler flags -->
    <!-- TODO: There are no string macros in the GDD assembler, so this must be done another way
      TargetLocation     SETS $(TARGETLOCATION)
      // pedantic matching of letter case with old makefiles
      TargetType         SETS $(OLD_FLAVOR)
      TargetModel        SETS $(TARGETPLATFORM)
      TargetPlatformName SETS PLATFORM_ARM_$(TARGETPLATFORM)
      CompilerVersion    SETS $(COMPILER_TOOL_VERSION)
      TargetPlatformProcessor SETS PLATFORM_ARM_$(TARGETPROCESSOR)
     -->
    <!-- Used by FirstEntry.s in liu of defining TargetPlatformProcessor & TargetPlatformName -->
    <AS_FLAGS>$(AS_FLAGS) --defsym PLATFORM_ARM_$(TARGETPROCESSOR)=1</AS_FLAGS>
    <AS_FLAGS>$(AS_FLAGS) --defsym PLATFORM_ARM_$(TARGETPLATFORM)=1</AS_FLAGS>

    <AS_FLAGS Condition="'$(reducesize)'=='true'">$(AS_FLAGS) --defsym HAL_REDUCESIZE=1</AS_FLAGS>

    <AS_FLAGS>$(AS_FLAGS) --defsym TARGETLOCATION_$(TARGETLOCATION)=1 $(AS_CC_CPP_COMMON_FLAGS) $(AS_TARGETTYPE_FLAGS) $(AS_INCS)</AS_FLAGS>

    <AS_FLAGS>$(AS_FLAGS) @(AS_Defines->'--defsym %(filename)',' ')</AS_FLAGS>

    <AS_SUBDIR>GNU_S</AS_SUBDIR>
  </PropertyGroup>

  <!-- common cc/cpp flags -->
  <PropertyGroup>
    <!-- CPP/CC flags depands on the target build -->
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='RTM'"          >$(CC_CPP_TARGETTYPE_FLAGS) -DBUILD_RTM -finline-functions</CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Debug'"        >$(CC_CPP_TARGETTYPE_FLAGS) -DDEBUG  -D_DEBUG </CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Instrumented'" >$(CC_CPP_TARGETTYPE_FLAGS) -DDEBUG  -D_DEBUG </CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Release'"      >$(CC_CPP_TARGETTYPE_FLAGS) -DNDEBUG</CC_CPP_TARGETTYPE_FLAGS>

    <CPP_FLAGS Condition="'$(FLAVOR)'=='Release'">$(CPP_FLAGS) -fno-default-inline</CPP_FLAGS>

    <CC_CPP_COMMON_FLAGS Condition="'$(TCP_IP_STACK)'=='LWIP'">$(CC_CPP_COMMON_FLAGS) -DTCPIP_LWIP</CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS Condition="'$(reducesize)'=='true'" >$(CC_CPP_COMMON_FLAGS) -DHAL_REDUCESIZE</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(timewarp)'=='true'"   >$(CC_CPP_COMMON_FLAGS) -DHAL_TIMEWARP</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(profile)'=='true'"    >$(CC_CPP_COMMON_FLAGS) -DARM_PROFILE_ACTIVE</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(FLAVOR)'!='RTM'"    >$(CC_CPP_COMMON_FLAGS) -DTINYCLR_ENABLE_SOURCELEVELDEBUGGING </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(sampleprof)'=='true'" >$(CC_CPP_COMMON_FLAGS) -DFIQ_SAMPLING_PROFILER </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(latencyprof)'=='true'">$(CC_CPP_COMMON_FLAGS) -DFIQ_LATENCY_PROFILER </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='arm'"     >$(CC_CPP_COMMON_FLAGS) -DCOMPILE_ARM </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb' and '$(COMPILER_TOOL)'=='GCCOP'"   >$(CC_CPP_COMMON_FLAGS) -DCOMPILE_THUMB </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb' and '$(COMPILER_TOOL)'!='GCCOP'"   >$(CC_CPP_COMMON_FLAGS) -mthumb-interwork -DCOMPILE_THUMB </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2'"  >$(CC_CPP_COMMON_FLAGS) -DCOMPILE_THUMB2 -mthumb </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2fp'">$(CC_CPP_COMMON_FLAGS) -DCOMPILE_THUMB2 -mthumb </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb' and '$(ARMBUILD_ONLY)'!='true' "   >$(CC_CPP_COMMON_FLAGS) -mthumb </CC_CPP_COMMON_FLAGS>    
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rza1'"    >$(CC_CPP_COMMON_FLAGS) -DCOMPILE_ARM </CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS Condition="'$(FLAVOR)'=='Instrumented' and '$(NATIVE_PROFILE_CLR)'!=''">$(CC_CPP_COMMON_FLAGS) -DNATIVE_PROFILE_CLR=$(NATIVE_PROFILE_CLR)</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(FLAVOR)'=='Instrumented' and '$(NATIVE_PROFILE_PAL)'!=''">$(CC_CPP_COMMON_FLAGS) -DNATIVE_PROFILE_PAL=$(NATIVE_PROFILE_PAL)</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(FLAVOR)'=='Instrumented' and '$(NATIVE_PROFILE_HAL)'!=''">$(CC_CPP_COMMON_FLAGS) -DNATIVE_PROFILE_HAL=$(NATIVE_PROFILE_HAL)</CC_CPP_COMMON_FLAGS>

    <!-- BUILD VERSIONS -->
    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) -DVERSION_MAJOR=$(MajorVersion) -DVERSION_MINOR=$(MinorVersion) -DVERSION_BUILD=$(BuildNumber) -DVERSION_REVISION=$(RevisionNumber) -DOEMSYSTEMINFOSTRING="\"$(OemSystemInfoString)\""</CC_CPP_COMMON_FLAGS>

    <!-- <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) -DPLATFORM_ARM_$(TARGETPROCESSOR) -DPLATFORM_ARM_$(TARGETPLATFORM) -DTARGETLOCATION_$(TARGETLOCATION)</CC_CPP_COMMON_FLAGS> -->
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='arm'"   >$(CC_CPP_COMMON_FLAGS) -DPLATFORM_ARM_$(TARGETPROCESSOR) -DPLATFORM_ARM_$(TARGETPLATFORM) -DTARGETLOCATION_$(TARGETLOCATION)</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb'" >$(CC_CPP_COMMON_FLAGS) -DPLATFORM_ARM_$(TARGETPROCESSOR) -DPLATFORM_ARM_$(TARGETPLATFORM) -DTARGETLOCATION_$(TARGETLOCATION)</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2'">$(CC_CPP_COMMON_FLAGS) -DPLATFORM_ARM_$(TARGETPROCESSOR) -DPLATFORM_ARM_$(TARGETPLATFORM) -DTARGETLOCATION_$(TARGETLOCATION)</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2fp'">$(CC_CPP_COMMON_FLAGS) -DPLATFORM_ARM_$(TARGETPROCESSOR) -DPLATFORM_ARM_$(TARGETPLATFORM) -DTARGETLOCATION_$(TARGETLOCATION)</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='sh2'"   >$(CC_CPP_COMMON_FLAGS) -DPLATFORM_SH2_$(TARGETPROCESSOR) -DPLATFORM_SH2_$(TARGETPLATFORM) -DTARGETLOCATION_$(TARGETLOCATION) -DSH2</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='sh2a'"  >$(CC_CPP_COMMON_FLAGS) -DPLATFORM_SH2A_$(TARGETPROCESSOR) -DPLATFORM_SH2A_$(TARGETPLATFORM) -DTARGETLOCATION_$(TARGETLOCATION) -DSH2A</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rx62n'" >$(CC_CPP_COMMON_FLAGS) -DPLATFORM_RX62N_$(TARGETPROCESSOR) -DPLATFORM_RX62N_$(TARGETPLATFORM) -DTARGETLOCATION_$(TARGETLOCATION) -DRX62N</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rx63n'" >$(CC_CPP_COMMON_FLAGS) -DPLATFORM_RX63N_$(TARGETPROCESSOR) -DPLATFORM_RX63N_$(TARGETPLATFORM) -DTARGETLOCATION_$(TARGETLOCATION) -DRX63N</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='rza1'"  >$(CC_CPP_COMMON_FLAGS) -DPLATFORM_RZA1_$(TARGETPROCESSOR) -DPLATFORM_RZA1_$(TARGETPLATFORM) -DTARGETLOCATION_$(TARGETLOCATION) -DRZA1</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='h8'"    >$(CC_CPP_COMMON_FLAGS) -DPLATFORM_H8 -DPLATFORM_H8_$(TARGETPROCESSOR) -DPLATFORM_H8_$(TARGETPLATFORM) -DTARGETLOCATION_$(TARGETLOCATION) -DRX63N</CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS Condition="'$(ENDIANNESS)'=='le'">$(CC_CPP_COMMON_FLAGS) -DLITTLE_ENDIAN</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(ENDIANNESS)'=='be'">$(CC_CPP_COMMON_FLAGS) -DBIG_ENDIAN</CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS Condition="'$(PATCH_BUILD)'=='Active'">$(CC_CPP_COMMON_FLAGS) -DPATCH_BUILD</CC_CPP_COMMON_FLAGS>
    <!-- <CC_CPP_COMMON_FLAGS Condition="'$(OS_PLATFORM)'=='true'">$(CC_CPP_COMMON_FLAGS) -DPLATFORM_ARM_OS_PORT</CC_CPP_COMMON_FLAGS> -->
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='arm'   and '$(OS_PLATFORM)'=='true'">$(CC_CPP_COMMON_FLAGS) -DPLATFORM_ARM_OS_PORT -fsection-anchors</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb' and '$(OS_PLATFORM)'=='true'">$(CC_CPP_COMMON_FLAGS) -DPLATFORM_ARM_OS_PORT -fsection-anchors</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2'and '$(OS_PLATFORM)'=='true'">$(CC_CPP_COMMON_FLAGS) -DPLATFORM_ARM_OS_PORT -fsection-anchors</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2fp'and '$(OS_PLATFORM)'=='true'">$(CC_CPP_COMMON_FLAGS) -DPLATFORM_ARM_OS_PORT -fsection-anchors</CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS Condition="'$(COMPILER_TOOL_VERSION)'=='GCC4.2'"   >$(CC_CPP_COMMON_FLAGS) -DGCC_V4_2 </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(COMPILER_TOOL_VERSION)'=='GCC4.4'"   >$(CC_CPP_COMMON_FLAGS) -DGCC_V4_4 -Wno-psabi -fdata-sections </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(COMPILER_TOOL_VERSION)'=='GCC4.5'"   >$(CC_CPP_COMMON_FLAGS) -DGCC_V4_5 -Wno-psabi -fdata-sections </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(COMPILER_TOOL_VERSION)'=='GCC4.6'"   >$(CC_CPP_COMMON_FLAGS) -DGCC_V4_6 -Wno-psabi -fdata-sections </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(COMPILER_TOOL_VERSION)'=='GCC4.7'"   >$(CC_CPP_COMMON_FLAGS) -DGCC_V4_7 -Wno-psabi -fdata-sections -flto </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(COMPILER_TOOL_VERSION)'=='GCC4.8'"   >$(CC_CPP_COMMON_FLAGS) -DGCC_V4_8 -Wno-psabi -fdata-sections -flto -fpermissive</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(COMPILER_TOOL_VERSION)'=='GCCOP4.2'" >$(CC_CPP_COMMON_FLAGS) -DGCCOP_V4_2 -D__ELIPS_COMPONENT_GENERATE_=true </CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS Condition="'$(COMPILER_TOOL)'=='GCC'"   >$(CC_CPP_COMMON_FLAGS) -DGCC </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(COMPILER_TOOL)'=='SHGCC'" >$(CC_CPP_COMMON_FLAGS) -DGCC </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(COMPILER_TOOL)'=='RXGCC'" >$(CC_CPP_COMMON_FLAGS) -DGCC </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(COMPILER_TOOL)'=='GCCOP'" >$(CC_CPP_COMMON_FLAGS) -DGCCOP -D__ELIPS_COMPONENT_GENERATE_=true </CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS Condition="'$(COMPILER_TOOL_VERSION_NUM)'&lt;'4.4'"   >$(CC_CPP_COMMON_FLAGS) -DGCC_OLD_ARG_LIST </CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) @(TinyCLR_Defines->'-D%(filename)',' ')</CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) @(CC_CPP_Defines->'-D%(filename)',' ')</CC_CPP_COMMON_FLAGS>

    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(CLRROOT)\$(Directory)</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\include</CC_CPP_INCS>
    <!-- <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Cores\arm</CC_CPP_INCS> -->
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='arm'"   >$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Cores\arm</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='thumb'" >$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Cores\arm</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='thumb2'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Cores\arm</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='thumb2fp'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Cores\arm</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(PLATFORM_TYPE)'=='MBED'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Targets\OS\mbed\libraries\mbed\api</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(PLATFORM_TYPE)'=='MBED'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Targets\OS\mbed\libraries\mbed\hal</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(PLATFORM_TYPE)'=='MBED'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Targets\OS\mbed\libraries\mbed\targets\cmsis</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(PLATFORM_TYPE)'=='MBED'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Targets\OS\mbed\libraries\mbed\targets\cmsis\TARGET_RENESAS\TARGET_RZ_A1H</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(PLATFORM_TYPE)'=='MBED'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Targets\OS\mbed\libraries\mbed\targets\cmsis\TARGET_RENESAS\TARGET_RZ_A1H\inc</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(PLATFORM_TYPE)'=='MBED'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Targets\OS\mbed\libraries\mbed\targets\cmsis\TARGET_RENESAS\TARGET_RZ_A1H\inc\iobitmasks</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(PLATFORM_TYPE)'=='MBED'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Targets\OS\mbed\libraries\mbed\targets\cmsis\TARGET_RENESAS\TARGET_RZ_A1H\inc\iodefines</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(PLATFORM_TYPE)'=='MBED'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Targets\OS\mbed\libraries\mbed\targets\cmsis\TARGET_RENESAS\TARGET_RZ_A1H</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(PLATFORM_TYPE)'=='MBED'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Targets\OS\mbed\libraries\mbed\targets\hal\TARGET_RENESAS\TARGET_RZ_A1H</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(PLATFORM_TYPE)'=='MBED'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Targets\OS\mbed\libraries\mbed\targets\hal\TARGET_RENESAS\TARGET_RZ_A1H\TARGET_MBED_MBRZA1H</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(PLATFORM_TYPE)'=='MBED'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Targets\OS\mbed\libraries\USBDevice\USBDevice\TARGET_RENESAS\TARGET_RZ_A1H\inc</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(PLATFORM_TYPE)'=='MBED'">$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Targets\OS\mbed\libraries\USBDevice\USBDevice</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\Support\Include  </CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\crypto\inc </CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\CLR\Include</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\CLR\Libraries\CorLib</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\CLR\Libraries\SPOT</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\CLR\Libraries\SPOT_Hardware</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\CLR\Libraries\SPOT_Graphics</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\CLR\Libraries\SPOT_Net</CC_CPP_INCS>
    <!-- <CC_CPP_INCS>$(CC_CPP_INCS) -I$(ARMINC)</CC_CPP_INCS> -->
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='arm'"   >$(CC_CPP_INCS) -I$(ARMINC)</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='thumb'" >$(CC_CPP_INCS) -I$(ARMINC)</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='thumb2'">$(CC_CPP_INCS) -I$(ARMINC)</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='thumb2fp'">$(CC_CPP_INCS) -I$(ARMINC)</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='sh2'"   >$(CC_CPP_INCS) -I$(SHINC)</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='sh2a'"  >$(CC_CPP_INCS) -I$(SHINC)</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='rx62n'" >$(CC_CPP_INCS) -I"$(RXINC)"</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='rx63n'" >$(CC_CPP_INCS) -I"$(RXINC)"</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='rza1'"  >$(CC_CPP_INCS) -I"$(RZINC)"</CC_CPP_INCS>
    <CC_CPP_INCS Condition="'$(INSTRUCTION_SET)'=='h8'"    >$(CC_CPP_INCS) -I"$(H8INC)"</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) @(IncludePaths->'-I$(CLRROOT)\%(relativedir)%(filename)',' ')</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) @(DirectIncludePaths->'-I%(FullPath)',' ')</CC_CPP_INCS>

    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) $(AS_CC_CPP_COMMON_FLAGS) $(CC_CPP_TARGETTYPE_FLAGS) $(CC_CPP_INCS) $(ExtraFlags)</CC_CPP_COMMON_FLAGS>
  </PropertyGroup>

  <!-- AS flags -->
  <PropertyGroup>
    <AS_FLAGS>$(AS_FLAGS) $(AS_CC_CPP_COMMON_FLAGS) $(ExtraASFlags)</AS_FLAGS>
  </PropertyGroup>

  <!-- CC flags -->
  <PropertyGroup>
    <CC_FLAGS>$(CC_FLAGS) $(CC_CPP_COMMON_FLAGS) $(ExtraCCFlags)</CC_FLAGS>
  </PropertyGroup>

  <!-- CPP flags -->
  <PropertyGroup>
    <CPP_FLAGS>$(CPP_FLAGS) $(CC_CPP_COMMON_FLAGS) $(ExtraCPPFlags) -Wabi </CPP_FLAGS>
    <CPP_FLAGS Condition="'$(FLAVOR)'=='Debug'">$(CPP_FLAGS) -fno-default-inline</CPP_FLAGS>
  </PropertyGroup>

  <!-- other flags -->
  <PropertyGroup>
    <ARFLAGS>$(ARFLAGS) -rcs</ARFLAGS>

    <LINK_FLAGS>$(LINK_FLAGS) -static --gc-sections --no-warn-mismatch --library-path=$(LIB_DIR) --library-path=$(PLATFORM_INDEPENDENT_LIB_DIR)  </LINK_FLAGS>
    
    <!-- 
        We need to allow multiple symbol definition in thumb mode because the ARM compatibility library interfere with GCC
        which prevents from linking properly. 
    -->
    <LINK_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb'">$(LINK_FLAGS) --allow-multiple-definition</LINK_FLAGS>
    <LINK_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2'">$(LINK_FLAGS) --allow-multiple-definition</LINK_FLAGS>
    <LINK_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2fp'">$(LINK_FLAGS) --allow-multiple-definition</LINK_FLAGS>
  </PropertyGroup>
   

  <PropertyGroup>
    <EXEName>$(BIN_DIR)\$(AssemblyName)</EXEName>

<!--    <TargetRule Condition="'$(OutputType)'=='Library'">ArmBuildLib</TargetRule>
    <TargetRule Condition="'$(OutputType)'=='Executable'">BuildAXF</TargetRule> -->
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='arm'   and '$(OutputType)'=='Library'">ArmBuildLib</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='thumb' and '$(OutputType)'=='Library'">ArmBuildLib</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='thumb2'and '$(OutputType)'=='Library'">ArmBuildLib</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='thumb2fp'and '$(OutputType)'=='Library'">ArmBuildLib</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='sh2'   and '$(OutputType)'=='Library'">ShBuildLib</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='sh2a'  and '$(OutputType)'=='Library'">ShBuildLib</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='rx62n' and '$(OutputType)'=='Library'">RXBuildLib</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='rx63n' and '$(OutputType)'=='Library'">RXBuildLib</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='rza1'  and '$(OutputType)'=='Library'">RZBuildLib</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='h8'    and '$(OutputType)'=='Library'">H8BuildLib</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='arm'   and '$(OutputType)'=='Executable'">ArmBuildAXF</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='thumb' and '$(OutputType)'=='Executable'">ArmBuildAXF</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='thumb2'and '$(OutputType)'=='Executable'">ArmBuildAXF</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='thumb2fp'and '$(OutputType)'=='Executable'">ArmBuildAXF</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='sh2'   and '$(OutputType)'=='Executable'">Sh2BuildAXF</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='sh2a'  and '$(OutputType)'=='Executable'">Sh2BuildAXF</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='rx62n' and '$(OutputType)'=='Executable'">RXBuildAXF</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='rx63n' and '$(OutputType)'=='Executable'">RXBuildAXF</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='rza1'  and '$(OutputType)'=='Executable'">RZBuildAXF</TargetRule>
    <TargetRule Condition="'$(INSTRUCTION_SET)'=='h8'    and '$(OutputType)'=='Executable'">H8BuildAXF</TargetRule>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(COMPILER_TOOL)'=='GCC'" >
    <GNU_LIB_DIR     Condition="'$(INSTRUCTION_SET)'=='arm'">$(GNU_TOOLS)\$(GNU_TARGET)\lib</GNU_LIB_DIR>
    <GNU_LIBGCC_DIR  Condition="'$(INSTRUCTION_SET)'=='arm'">$(GNU_TOOLS)\lib\gcc\$(GNU_TARGET)\$(GNU_VERSION)</GNU_LIBGCC_DIR>
    <ExtraLibs       Condition="'$(INSTRUCTION_SET)'=='arm'"></ExtraLibs>

    <!-- instead include the Thumb libc.a and libgcc.a... we include the ARM mode one, if include the THUMB libs, the linker failed to resolve the branch function address and function branch to unknown address-->
    <!-- this is happened at the libgcc.a, e.g ldivmod function, helper function address are not found -->
    <GNU_LIB_DIR     Condition="'$(INSTRUCTION_SET)'=='thumb'">$(GNU_TOOLS)\$(GNU_TARGET)\lib\thumb</GNU_LIB_DIR>
    <GNU_LIBGCC_DIR  Condition="'$(INSTRUCTION_SET)'=='thumb'">$(GNU_TOOLS)\lib\gcc\$(GNU_TARGET)\$(GNU_VERSION)\thumb</GNU_LIBGCC_DIR>
    <GNU_LIB_DIR     Condition="'$(INSTRUCTION_SET)'=='thumb2'">$(GNU_TOOLS)\$(GNU_TARGET)\lib\thumb2</GNU_LIB_DIR>
    <GNU_LIBGCC_DIR  Condition="'$(INSTRUCTION_SET)'=='thumb2'">$(GNU_TOOLS)\lib\gcc\$(GNU_TARGET)\$(GNU_VERSION)\thumb2</GNU_LIBGCC_DIR>
    <GNU_LIB_DIR     Condition="'$(INSTRUCTION_SET)'=='thumb2fp'">$(GNU_TOOLS)\$(GNU_TARGET)\lib\thumb2</GNU_LIB_DIR>
    <GNU_LIBGCC_DIR  Condition="'$(INSTRUCTION_SET)'=='thumb2fp'">$(GNU_TOOLS)\lib\gcc\$(GNU_TARGET)\$(GNU_VERSION)\thumb2</GNU_LIBGCC_DIR>
    <!-- adding the extra lib if the CLR is compiled in RVDS, whenever we have libs from RVDS, we need this -->
    <ExtraLibs       Condition="'$(INSTRUCTION_SET)'=='thumb' and '$(ENDIANNESS)'=='be'">$(SPOCLIENT)\tools\ads_v3_1\Lib\armlib\h_t.b $(SPOCLIENT)\tools\ads_v3_1\Lib\armlib\c_t.b</ExtraLibs>
    <ExtraLibs       Condition="'$(INSTRUCTION_SET)'=='thumb' and '$(ENDIANNESS)'=='le'">$(SPOCLIENT)\tools\ads_v3_1\Lib\armlib\h_t.l $(SPOCLIENT)\tools\ads_v3_1\Lib\armlib\c_t.l</ExtraLibs>

    <LIBGCC >libgcc.a</LIBGCC>
    <LIBCGCC>libc.a</LIBCGCC>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(COMPILER_TOOL)'=='GCCOP'" >
    <ENABLE_FASTCOMPILE Condition="'$(FLAVOR)'=='Debug'">false</ENABLE_FASTCOMPILE>
    <GNU_LIB_DIR     Condition="'$(INSTRUCTION_SET)'=='arm'">$(GNU_TOOLS)\lib</GNU_LIB_DIR>
    <GNU_LIBGCC_DIR  Condition="'$(INSTRUCTION_SET)'=='arm'">$(GNU_TOOLS)\lib</GNU_LIBGCC_DIR>
    <ExtraLibs       Condition="'$(INSTRUCTION_SET)'=='arm'"></ExtraLibs>
    <LIBGCC          Condition="'$(INSTRUCTION_SET)'=='arm'">libgccale.a</LIBGCC>
	
    <GNU_LIB_DIR     Condition="'$(INSTRUCTION_SET)'=='thumb'">$(GNU_TOOLS)\lib</GNU_LIB_DIR>
    <GNU_LIBGCC_DIR  Condition="'$(INSTRUCTION_SET)'=='thumb'">$(GNU_TOOLS)\lib</GNU_LIBGCC_DIR>
    <LIBGCC          Condition="'$(INSTRUCTION_SET)'=='thumb'">libgcctle.a</LIBGCC>
    <LIBCGCC>libc.a</LIBCGCC>

  </PropertyGroup>

  <PropertyGroup Condition="'$(COMPILER_TOOL)'=='GCC' and '$(INSTRUCTION_SET)'=='sh2'" >
    <GNU_LIB_DIR     Condition="'$(INSTRUCTION_SET)'=='sh2'" >$(GNU_TOOLS)\$(GNU_TARGET)\lib\m2</GNU_LIB_DIR>
    <GNU_LIBGCC_DIR  Condition="'$(INSTRUCTION_SET)'=='sh2'" >$(GNU_TOOLS)\lib\gcc\$(GNU_TARGET)\$(GNU_VERSION)\m2</GNU_LIBGCC_DIR>
    <ExtraLibs       Condition="'$(INSTRUCTION_SET)'=='sh2'" ></ExtraLibs>

    <LIBGCC>libgcc.a</LIBGCC>
    <LIBGCC1>libgcc-Os-4-200.a</LIBGCC1>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(COMPILER_TOOL)'=='GCC' and '$(INSTRUCTION_SET)'=='sh2a'" >
    <GNU_LIB_DIR     Condition="'$(INSTRUCTION_SET)'=='sh2a'" >$(GNU_TOOLS)\$(GNU_TARGET)\lib\m2a</GNU_LIB_DIR>
    <GNU_LIBGCC_DIR  Condition="'$(INSTRUCTION_SET)'=='sh2a'" >$(GNU_TOOLS)\lib\gcc\$(GNU_TARGET)\$(GNU_VERSION)\m2a</GNU_LIBGCC_DIR>
    <ExtraLibs       Condition="'$(INSTRUCTION_SET)'=='sh2a'" ></ExtraLibs>

    <LIBGCC>libgcc.a</LIBGCC>
    <LIBGCC1>libgcc-Os-4-200.a</LIBGCC1>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(COMPILER_TOOL)'=='GCC' and '$(INSTRUCTION_SET)'=='rx62n'" >
    <GNU_LIB_DIR     Condition="'$(INSTRUCTION_SET)'=='rx62n'" >$(GNU_TOOLS)\$(GNU_TARGET)\lib</GNU_LIB_DIR>
    <GNU_LIBGCC_DIR  Condition="'$(INSTRUCTION_SET)'=='rx62n'" >$(GNU_TOOLS)\lib\gcc\$(GNU_TARGET)\$(GNU_VERSION)</GNU_LIBGCC_DIR>
    <ExtraLibs       Condition="'$(INSTRUCTION_SET)'=='rx62n'" ></ExtraLibs>

    <LIBGCC>libgcc.a</LIBGCC>
  </PropertyGroup>

  <PropertyGroup Condition="'$(COMPILER_TOOL)'=='GCC' and '$(INSTRUCTION_SET)'=='rx63n'" >
    <GNU_LIB_DIR     Condition="'$(INSTRUCTION_SET)'=='rx63n'" >$(GNU_TOOLS)\$(GNU_TARGET)\lib</GNU_LIB_DIR>
    <GNU_LIBGCC_DIR  Condition="'$(INSTRUCTION_SET)'=='rx63n'" >$(GNU_TOOLS)\lib\gcc\$(GNU_TARGET)\$(GNU_VERSION)</GNU_LIBGCC_DIR>
    <ExtraLibs       Condition="'$(INSTRUCTION_SET)'=='rx63n'" ></ExtraLibs>

    <LIBGCC>libgcc.a</LIBGCC>
  </PropertyGroup>

  <PropertyGroup Condition="'$(COMPILER_TOOL)'=='GCC' and '$(INSTRUCTION_SET)'=='rza1'" >
    <GNU_LIB_DIR     Condition="'$(INSTRUCTION_SET)'=='rza1'" >$(GNU_TOOLS)\$(GNU_TARGET)\lib</GNU_LIB_DIR>
    <GNU_LIBGCC_DIR  Condition="'$(INSTRUCTION_SET)'=='rza1'" >$(GNU_TOOLS)\lib\gcc\$(GNU_TARGET)\$(GNU_VERSION)</GNU_LIBGCC_DIR>
    <ExtraLibs       Condition="'$(INSTRUCTION_SET)'=='rza1'" ></ExtraLibs>

    <LIBGCC>libgcc.a</LIBGCC>
  </PropertyGroup>

  <PropertyGroup Condition="'$(COMPILER_TOOL)'=='GCC' and '$(INSTRUCTION_SET)'=='h8'" >
    <GNU_LIB_DIR     Condition="'$(INSTRUCTION_SET)'=='h8'" >$(GNU_TOOLS)\$(GNU_TARGET)\lib\h8300h</GNU_LIB_DIR>
    <GNU_LIBGCC_DIR  Condition="'$(INSTRUCTION_SET)'=='h8'" >$(GNU_TOOLS)\lib\gcc\$(GNU_TARGET)\$(GNU_VERSION)\h8300h</GNU_LIBGCC_DIR>
    <ExtraLibs       Condition="'$(INSTRUCTION_SET)'=='h8'" ></ExtraLibs>

    <LIBGCC>libgcc.a</LIBGCC>
  </PropertyGroup>

  <!-- item group  -->

  <ItemGroup>
    <MakeAXFInputs Include="$(MakeAXFInputs)"/>
    <FastCompileFile Condition="'$(ENABLE_FASTCOMPILE)'=='true'" Include="@(FastCompileCFile)"/>
    <FastCompileFile Condition="'$(ENABLE_FASTCOMPILE)'=='true'" Include="@(FastCompileCPPFile)"/>
  </ItemGroup>


  <ItemGroup Condition="'$(OutputType)'=='Executable'">
    <!-- use the tools\make\scatterfile_definition.xml, otherwise has to state the scatterfile at the dotNetMF.proj-->

    <EXEScatterFileDefinition Condition="'$(EXEScatterFileDefinition)'==''" Include="$(SPO_SDK)\tools\make\scatterfile_definition.xml"/>
    <EXEScatterFileDefinition Condition="'$(EXEScatterFileDefinition)'!=''" Include="$(EXEScatterFileDefinition)"/>

    <EXEScatterFile Include="$(BIN_DIR)\$(AssemblyName)_scatterfile.ldf"/>
    <EXEIncludePaths Include="$(ARMINC)"/>
  </ItemGroup>

 <!-- stubs function for all build in OP's GCC, as those functions are not included in their tool-chain -->
  <ItemGroup Condition="'$(COMPILER_TOOL)'=='GCCOP' and '$(OutputType)'=='Executable' and EXISTS('$(SPOCLIENT)\DeviceCode\Drivers\Stubs\TempForGCC\dotNetMF.proj')">
    <RequiredProjects Include="$(SPOCLIENT)\DeviceCode\Drivers\Stubs\TempForGCC\dotNetMF.proj" />
    <DriverLibs Include="Gcc_hal.$(LIB_EXT)" />
  </ItemGroup>

  <!-- target group for compile,assembler,linker, librarian, loader -->

  <Target Name="ArmCompileCPP" Condition="'@(CPPFiles)'!='' or '@(FastCompileCPPFile)'!=''" Inputs="@(FastCompileCPPFile);@(CPPFiles);@(HFiles)" Outputs="@(ObjFiles)">
    <Exec Condition="Exists('%(FastCompileCPPFile.FullPath)') and '@(FastCompileCPPFile)'!='' and '$(ENABLE_FASTCOMPILE)'=='true'" Command="$(ADS_WRAPPER) $(CPP) $(CPP_FLAGS) $(POS_DEPENDENT) -o $(OBJ_DIR)\%(FastCompileCPPFile.Filename).$(OBJ_EXT) -c %(FastCompileCPPFile.FullPath) "/>
    <Exec Condition="Exists('%(CPPFiles.FullPath)')           and '@(CPPFiles)'!=''and ('$(ENABLE_FASTCOMPILE)'!='true' or '@(FastCompileCPPFile)'=='')" Command="$(ADS_WRAPPER) $(CPP) $(CPP_FLAGS) $(POS_DEPENDENT) -o $(OBJ_DIR)\%(CPPFiles.Filename).$(OBJ_EXT) -c %(CPPFiles.FullPath)  "/>
  </Target>

  <Target Name="ShCompileCPP" Condition="'@(CPPFiles)'!='' or '@(FastCompileCPPFile)'!=''" Inputs="@(FastCompileCPPFile);@(CPPFiles);@(HFiles)" Outputs="@(ObjFiles)">
    <Exec Condition="Exists('%(FastCompileCPPFile.FullPath)') and '@(FastCompileCPPFile)'!='' and '$(ENABLE_FASTCOMPILE)'=='true'" Command="$(ADS_WRAPPER) $(CPP) $(CPP_FLAGS) $(POS_DEPENDENT) -o $(OBJ_DIR)\%(FastCompileCPPFile.Filename).$(OBJ_EXT) -c %(FastCompileCPPFile.FullPath) "/>
    <Exec Condition="Exists('%(CPPFiles.FullPath)')           and '@(CPPFiles)'!=''and ('$(ENABLE_FASTCOMPILE)'!='true' or '@(FastCompileCPPFile)'=='')" Command="$(ADS_WRAPPER) $(CPP) $(CPP_FLAGS) $(POS_DEPENDENT) -o $(OBJ_DIR)\%(CPPFiles.Filename).$(OBJ_EXT) -c %(CPPFiles.FullPath)  "/>
  </Target>

  <Target Name="RxCompileCPP" Condition="'@(CPPFiles)'!='' or '@(FastCompileCPPFile)'!=''" Inputs="@(FastCompileCPPFile);@(CPPFiles);@(HFiles)" Outputs="@(ObjFiles)">
    <Exec Condition="Exists('%(FastCompileCPPFile.FullPath)') and '@(FastCompileCPPFile)'!='' and '$(ENABLE_FASTCOMPILE)'=='true'" Command="$(ADS_WRAPPER) $(CPP) $(CPP_FLAGS) $(POS_DEPENDENT) -o $(OBJ_DIR)\%(FastCompileCPPFile.Filename).$(OBJ_EXT) -c %(FastCompileCPPFile.FullPath) "/>
    <Exec Condition="Exists('%(CPPFiles.FullPath)')           and '@(CPPFiles)'!=''and ('$(ENABLE_FASTCOMPILE)'!='true' or '@(FastCompileCPPFile)'=='')" Command="$(ADS_WRAPPER) $(CPP) $(CPP_FLAGS) $(POS_DEPENDENT) -o $(OBJ_DIR)\%(CPPFiles.Filename).$(OBJ_EXT) -c %(CPPFiles.FullPath)  "/>
  </Target>

  <Target Name="RzCompileCPP" Condition="'@(CPPFiles)'!='' or '@(FastCompileCPPFile)'!=''" Inputs="@(FastCompileCPPFile);@(CPPFiles);@(HFiles)" Outputs="@(ObjFiles)">
    <Exec Condition="Exists('%(FastCompileCPPFile.FullPath)') and '@(FastCompileCPPFile)'!='' and '$(ENABLE_FASTCOMPILE)'=='true'" Command="$(ADS_WRAPPER) $(CPP) $(CPP_FLAGS) $(POS_DEPENDENT) -o $(OBJ_DIR)\%(FastCompileCPPFile.Filename).$(OBJ_EXT) -c %(FastCompileCPPFile.FullPath) "/>
    <Exec Condition="Exists('%(CPPFiles.FullPath)')           and '@(CPPFiles)'!=''and ('$(ENABLE_FASTCOMPILE)'!='true' or '@(FastCompileCPPFile)'=='')" Command="$(ADS_WRAPPER) $(CPP) $(CPP_FLAGS) $(POS_DEPENDENT) -o $(OBJ_DIR)\%(CPPFiles.Filename).$(OBJ_EXT) -c %(CPPFiles.FullPath)  "/>
  </Target>

  <Target Name="H8CompileCPP" Condition="'@(CPPFiles)'!='' or '@(FastCompileCPPFile)'!=''" Inputs="@(FastCompileCPPFile);@(CPPFiles);@(HFiles)" Outputs="@(ObjFiles)">
    <Exec Condition="Exists('%(FastCompileCPPFile.FullPath)') and '@(FastCompileCPPFile)'!='' and '$(ENABLE_FASTCOMPILE)'=='true'" Command="$(ADS_WRAPPER) $(CPP) $(CPP_FLAGS) $(POS_DEPENDENT) -o $(OBJ_DIR)\%(FastCompileCPPFile.Filename).$(OBJ_EXT) -c %(FastCompileCPPFile.FullPath) "/>
    <Exec Condition="Exists('%(CPPFiles.FullPath)')           and '@(CPPFiles)'!=''and ('$(ENABLE_FASTCOMPILE)'!='true' or '@(FastCompileCPPFile)'=='')" Command="$(ADS_WRAPPER) $(CPP) $(CPP_FLAGS) $(POS_DEPENDENT) -o $(OBJ_DIR)\%(CPPFiles.Filename).$(OBJ_EXT) -c %(CPPFiles.FullPath)  "/>
  </Target>

  <Target Name="ArmCompileC" Condition="'@(CFiles)'!='' or '@(FastCompileCFile)'==''" Inputs="@(FastCompileCFile);@(CFiles)" Outputs="@(ObjFiles)">
    <Exec Condition="Exists('%(FastCompileCFile.FullPath)') and  '@(FastCompileCFile)'!='' and '$(ENABLE_FASTCOMPILE)'=='true'" Command="$(ADS_WRAPPER) $(CC) $(CC_FLAGS) $(POS_DEPENDENT) -o$(OBJ_DIR)\%(FastCompileCFile.Filename).$(OBJ_EXT) -c %(FastCompileCFile.FullPath) "/>
    <Exec Condition="Exists('%(CFiles.FullPath)')           and  '@(CFiles)'!=''and ('$(ENABLE_FASTCOMPILE)'!='true' or '@(FastCompileCFile)'=='')" Command="$(ADS_WRAPPER) $(CC) $(CC_FLAGS) $(POS_DEPENDENT) -o$(OBJ_DIR)\%(CFiles.Filename).$(OBJ_EXT) -c %(CFiles.FullPath) "/>
  </Target>

  <Target Name="ShCompileC" Condition="'@(CFiles)'!='' or '@(FastCompileCFile)'==''" Inputs="@(FastCompileCFile);@(CFiles)" Outputs="@(ObjFiles)">
    <Exec Condition="Exists('%(FastCompileCFile.FullPath)') and  '@(FastCompileCFile)'!='' and '$(ENABLE_FASTCOMPILE)'=='true'" Command="$(ADS_WRAPPER) $(CC) $(CC_FLAGS) $(POS_DEPENDENT) -o$(OBJ_DIR)\%(FastCompileCFile.Filename).$(OBJ_EXT) -c %(FastCompileCFile.FullPath) "/>
    <Exec Condition="Exists('%(CFiles.FullPath)')           and  '@(CFiles)'!=''and ('$(ENABLE_FASTCOMPILE)'!='true' or '@(FastCompileCFile)'=='')" Command="$(ADS_WRAPPER) $(CC) $(CC_FLAGS) $(POS_DEPENDENT) -o$(OBJ_DIR)\%(CFiles.Filename).$(OBJ_EXT) -c %(CFiles.FullPath) "/>
  </Target>

  <Target Name="RxCompileC" Condition="'@(CFiles)'!='' or '@(FastCompileCFile)'==''" Inputs="@(FastCompileCFile);@(CFiles)" Outputs="@(ObjFiles)">
    <Exec Condition="Exists('%(FastCompileCFile.FullPath)') and  '@(FastCompileCFile)'!='' and '$(ENABLE_FASTCOMPILE)'=='true'" Command="$(ADS_WRAPPER) $(CC) $(CC_FLAGS) $(POS_DEPENDENT) -o$(OBJ_DIR)\%(FastCompileCFile.Filename).$(OBJ_EXT) -c %(FastCompileCFile.FullPath) "/>
    <Exec Condition="Exists('%(CFiles.FullPath)')           and  '@(CFiles)'!=''and ('$(ENABLE_FASTCOMPILE)'!='true' or '@(FastCompileCFile)'=='')" Command="$(ADS_WRAPPER) $(CC) $(CC_FLAGS) $(POS_DEPENDENT) -o$(OBJ_DIR)\%(CFiles.Filename).$(OBJ_EXT) -c %(CFiles.FullPath) "/>
  </Target>

  <Target Name="RzCompileC" Condition="'@(CFiles)'!='' or '@(FastCompileCFile)'==''" Inputs="@(FastCompileCFile);@(CFiles)" Outputs="@(ObjFiles)">
    <Exec Condition="Exists('%(FastCompileCFile.FullPath)') and  '@(FastCompileCFile)'!='' and '$(ENABLE_FASTCOMPILE)'=='true'" Command="$(ADS_WRAPPER) $(CC) $(CC_FLAGS) $(POS_DEPENDENT) -o$(OBJ_DIR)\%(FastCompileCFile.Filename).$(OBJ_EXT) -c %(FastCompileCFile.FullPath) "/>
    <Exec Condition="Exists('%(CFiles.FullPath)')           and  '@(CFiles)'!=''and ('$(ENABLE_FASTCOMPILE)'!='true' or '@(FastCompileCFile)'=='')" Command="$(ADS_WRAPPER) $(CC) $(CC_FLAGS) $(POS_DEPENDENT) -o$(OBJ_DIR)\%(CFiles.Filename).$(OBJ_EXT) -c %(CFiles.FullPath) "/>
  </Target>

  <Target Name="H8CompileC" Condition="'@(CFiles)'!='' or '@(FastCompileCFile)'==''" Inputs="@(FastCompileCFile);@(CFiles)" Outputs="@(ObjFiles)">
    <Exec Condition="Exists('%(FastCompileCFile.FullPath)') and  '@(FastCompileCFile)'!='' and '$(ENABLE_FASTCOMPILE)'=='true'" Command="$(ADS_WRAPPER) $(CC) $(CC_FLAGS) $(POS_DEPENDENT) -o$(OBJ_DIR)\%(FastCompileCFile.Filename).$(OBJ_EXT) -c %(FastCompileCFile.FullPath) "/>
    <Exec Condition="Exists('%(CFiles.FullPath)')           and  '@(CFiles)'!=''and ('$(ENABLE_FASTCOMPILE)'!='true' or '@(FastCompileCFile)'=='')" Command="$(ADS_WRAPPER) $(CC) $(CC_FLAGS) $(POS_DEPENDENT) -o$(OBJ_DIR)\%(CFiles.Filename).$(OBJ_EXT) -c %(CFiles.FullPath) "/>
  </Target>

  <Target Name="ArmAssemble" Condition="'@(AssemblyFiles)'!=''" Inputs="@(AssemblyFiles)" Outputs="@(AssemblyFiles->'$(OBJ_DIR)\%(FileName).$(OBJ_EXT)')">
    <Exec Condition="Exists('%(AssemblyFiles.FullPath)')" Command="del /q  $(OBJ_DIR)\%(AssemblyFiles.Filename).$(OBJ_EXT)" ContinueOnError="true" />
    <Exec Condition="Exists('%(AssemblyFiles.FullPath)')" Command="$(AS) $(AS_FLAGS) -a=$(OBJ_DIR)\%(AssemblyFiles.Filename).txt -o $(OBJ_DIR)\%(AssemblyFiles.Filename).$(OBJ_EXT) %(AssemblyFiles.FullPath)"/>
  </Target>

  <Target Name="ShAssemble" Condition="'@(AssemblyFiles)'!=''" Inputs="@(AssemblyFiles)" Outputs="@(AssemblyFiles->'$(OBJ_DIR)\%(FileName).$(OBJ_EXT)')">
    <Exec Condition="Exists('%(AssemblyFiles.FullPath)')" Command="del /q  $(OBJ_DIR)\%(AssemblyFiles.Filename).$(OBJ_EXT)" ContinueOnError="true" />
    <Exec Condition="Exists('%(AssemblyFiles.FullPath)')" Command="$(AS) $(AS_FLAGS) -a=$(OBJ_DIR)\%(AssemblyFiles.Filename).txt -o $(OBJ_DIR)\%(AssemblyFiles.Filename).$(OBJ_EXT) %(AssemblyFiles.FullPath)"/>
  </Target>

  <Target Name="RxAssemble" Condition="'@(AssemblyFiles)'!=''" Inputs="@(AssemblyFiles)" Outputs="@(AssemblyFiles->'$(OBJ_DIR)\%(FileName).$(OBJ_EXT)')">
<!--
    <Exec Condition="Exists('%(AssemblyFiles.FullPath)')" Command="del /q  $(OBJ_DIR)\%(AssemblyFiles.Filename).$(OBJ_EXT)" ContinueOnError="true" />
-->
    <Exec Condition="Exists('%(AssemblyFiles.FullPath)')" Command="$(AS) $(AS_FLAGS) -a=$(OBJ_DIR)\%(AssemblyFiles.Filename).txt -o $(OBJ_DIR)\%(AssemblyFiles.Filename).$(OBJ_EXT) %(AssemblyFiles.FullPath)"/>
  </Target>

  <Target Name="RzAssemble" Condition="'@(AssemblyFiles)'!=''" Inputs="@(AssemblyFiles)" Outputs="@(AssemblyFiles->'$(OBJ_DIR)\%(FileName).$(OBJ_EXT)')">
    <Exec Condition="Exists('%(AssemblyFiles.FullPath)')" Command="$(AS) $(AS_FLAGS) -a=$(OBJ_DIR)\%(AssemblyFiles.Filename).txt -o $(OBJ_DIR)\%(AssemblyFiles.Filename).$(OBJ_EXT) %(AssemblyFiles.FullPath)"/>
  </Target>

  <Target Name="H8Assemble" Condition="'@(AssemblyFiles)'!=''" Inputs="@(AssemblyFiles)" Outputs="@(AssemblyFiles->'$(OBJ_DIR)\%(FileName).$(OBJ_EXT)')">
<!--
    <Exec Condition="Exists('%(AssemblyFiles.FullPath)')" Command="del /q  $(OBJ_DIR)\%(AssemblyFiles.Filename).$(OBJ_EXT)" ContinueOnError="true" />
-->
    <Exec Condition="Exists('%(AssemblyFiles.FullPath)')" Command="$(AS) $(AS_FLAGS) -a=$(OBJ_DIR)\%(AssemblyFiles.Filename).txt -o $(OBJ_DIR)\%(AssemblyFiles.Filename).$(OBJ_EXT) %(AssemblyFiles.FullPath)"/>
  </Target>

  <Target Name="DelBuildLib" Condition="'$(OutputType)'=='Library'" Inputs="@(FastCompileCPPFile);@(CPPFiles);@(FastCompileCFile);@(CFiles);@(AssemblyFiles);@(HFiles)" Outputs="@(TargetLib)">
    <Exec Condition="'@(FilesExist)'!='' " Command="del /q  @(TargetLib)" ContinueOnError="true" />
    <Exec Condition="'@(FilesExist)'!='' " Command="del /q  @(TargetLib->'%(FullPath).manifest', ' ')" ContinueOnError="true" />
 </Target>

  <Target Name="ArmBuildLib" Condition="'$(OutputType)'=='Library'" DependsOnTargets="FindCompileFilesExistence;FindFastCompileFilesExistence;DelBuildLib;ArmCompileC;ArmCompileCPP;ArmAssemble;CreateLibManifest;$(ExtraTargets);" Inputs="@(ObjFiles)" Outputs="@(TargetLib);@(TargetLib->'%(FullPath).manifest')">
    <Exec WorkingDirectory="$(OBJ_DIR)" Condition="'@(FilesExist)'!=''" Command="$(AR) $(ARFLAGS) @(TargetLib) @(ObjFiles->'%(FileName)%(Extension)',' ') "/>
  </Target>

  <Target Name="ShBuildLib" Condition="'$(OutputType)'=='Library'" DependsOnTargets="FindCompileFilesExistence;FindFastCompileFilesExistence;DelBuildLib;ShCompileC;ShCompileCPP;ShAssemble;CreateLibManifest;$(ExtraTargets);" Inputs="@(ObjFiles)" Outputs="@(TargetLib);@(TargetLib->'%(FullPath).manifest')">
    <Exec Condition="'@(FilesExist)'!=''" Command="$(AR) $(ARFLAGS) @(TargetLib) @(ObjFiles,' ')"/>
  </Target>

  <Target Name="RxBuildLib" Condition="'$(OutputType)'=='Library'" DependsOnTargets="FindCompileFilesExistence;FindFastCompileFilesExistence;DelBuildLib;RxCompileC;RxCompileCPP;RxAssemble;CreateLibManifest;$(ExtraTargets);" Inputs="@(ObjFiles)" Outputs="@(TargetLib);@(TargetLib->'%(FullPath).manifest')">
    <Exec Condition="'@(FilesExist)'!=''" Command="$(AR) $(ARFLAGS) @(TargetLib) @(ObjFiles,' ')"/>
  </Target>
  
  <Target Name="RzBuildLib" Condition="'$(OutputType)'=='Library'" DependsOnTargets="FindCompileFilesExistence;FindFastCompileFilesExistence;DelBuildLib;RzCompileC;RzCompileCPP;RzAssemble;CreateLibManifest;$(ExtraTargets);" Inputs="@(ObjFiles)" Outputs="@(TargetLib);@(TargetLib->'%(FullPath).manifest')">
    <Exec Condition="'@(FilesExist)'!=''" Command="$(AR) $(ARFLAGS) @(TargetLib) @(ObjFiles,' ')"/>
  </Target>
  
  <Target Name="H8BuildLib" Condition="'$(OutputType)'=='Library'" DependsOnTargets="FindCompileFilesExistence;FindFastCompileFilesExistence;DelBuildLib;H8CompileC;H8CompileCPP;H8Assemble;CreateLibManifest;$(ExtraTargets);" Inputs="@(ObjFiles)" Outputs="@(TargetLib);@(TargetLib->'%(FullPath).manifest')">
    <Exec Condition="'@(FilesExist)'!=''" Command="$(AR) $(ARFLAGS) @(TargetLib) @(ObjFiles,' ')"/>
  </Target>
  
  <Target Name="ArmBuildAXF" Condition="'$(OutputType)'=='Executable'" DependsOnTargets="ArmCompileCPP;ArmCompileC;ArmAssemble;$(ExtraEXETargets);BuildScatterfile" Inputs="@(EXEInputs);@(InputLibs);@(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)\%(FileName)%(Extension)');@(DriverLibs->'$(LIB_DIR)\%(FileName)%(Extension)');@(EXEScatterFile)" Outputs="@(EXEOutput)">
    <Exec WorkingDirectory="$(LIB_DIR)" Condition="'$(COMPILER_TOOL)'=='GCC'"    Command="$(LINK) $(LINK_FLAGS) -u ARM_Vectors -u _start --Map $(EXEName).map --output=@(EXEOutput) --script=@(EXEScatterFile,' ') @(EXEInputs,' ') -( @(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)%(FileName)%(Extension)',' ') @(DriverLibs->'%(FileName)%(Extension)',' ')  @(InputLibs,' ') -) -( &#x22;$(GNU_LIB_DIR)\libm.a&#x22; &#x22;$(GNU_LIB_DIR)\$(LIBCGCC)&#x22; &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC)&#x22; -) -( $(ExtraLibs) -)"/>
    <Exec WorkingDirectory="$(LIB_DIR)" Condition="'$(COMPILER_TOOL)'=='GCCOP'"  Command="$(LINK) $(LINK_FLAGS) -u ARM_Vectors -u _start --Map $(EXEName).map --output=@(EXEOutput) --script=@(EXEScatterFile,' ') @(EXEInputs,' ') -( @(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)%(FileName)%(Extension)',' ') @(DriverLibs->'%(FileName)%(Extension)',' ')  @(InputLibs,' ') -) -( &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC)&#x22;  -) -( $(ExtraLibs) -)"/>

    <Exec Command="$(OBJDUMP) -d -EL @(EXEOutput) > $(EXEName).axfdump" />

    <MakeDir Directories="$(EXEName).bin" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).bin')" />
    <MakeDir Directories="$(EXEName).hex" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).hex')" />

    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM -j ER_RAM_RO -j ER_RAM_RW -j ER_CONFIG -O srec @(EXEOutput) $(EXEName).mot" />
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM -j ER_RAM_RO -j ER_RAM_RW -j ER_CONFIG -O ihex @(EXEOutput) $(EXEName).ihex" />

    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -O binary @(EXEOutput) $(EXEName).bin"                      Condition="'$(MultipleOutputSections)'!='true'" />
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -O binary @(EXEOutput) $(EXEName).bin\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                                                                     -O binary @(EXEOutput) $(EXEName).bin\ER_DAT"               Condition="'$(MultipleOutputSections)'=='true' and '$(ExcludeDatRegion)'!='true' and ('$(FLAVOR)'!='RTM' OR '$(Platform)'=='SAM9261_EK')" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                                                                  -O binary @(EXEOutput) $(EXEName).bin\ER_CONFIG"            Condition="'$(MultipleOutputSections)'=='true'" />

    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -j ER_IRAM -O srec --gap-fill 0 --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                                                                                -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_DAT"               Condition="'$(MultipleOutputSections)'=='true' and '$(ExcludeDatRegion)'!='true' and ('$(FLAVOR)'!='RTM' OR '$(Platform)'=='SAM9261_EK')" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                                                                             -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_CONFIG"            Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_IFLASH                                                                                             -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_IFLASH"            Condition="'$(MultipleOutputSections)'=='true'" />

    <Exec Command="$(NM) $(EXEName).axf >> $(EXEName).dump"/>
    <Exec Command="$(CREATESYMDEF)     $(EXEName).dump $(EXEName).symdefs" Condition="EXISTS('$(CREATESYMDEF)')" />
    <Exec Command="$(CREATESYMDEF_ALT) $(EXEName).dump $(EXEName).symdefs" Condition="!EXISTS('$(CREATESYMDEF)')" />

    <!--     echo adding LOAD_IMAGE_CRC value to $*.symdefs -->
    <Exec Condition="'$(ADD_LOAD_IMAGE_CRC)'=='true'" Command="$(TOOLS_DIR)\BuildHelper -hashBuild $(EXEName).bin$(ImageLocation) $(EXEName).symdefs" />
  </Target>

  <Target Name="ArmBuildAXForToppers" Condition="'$(OutputType)'=='Executable'" DependsOnTargets="ArmCompileCPP;ArmCompileC;ArmAssemble;$(ExtraEXETargets);BuildScatterfile" Inputs="@(EXEInputs);@(InputLibs);@(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)\%(FileName)%(Extension)');@(DriverLibs->'$(LIB_DIR)\%(FileName)%(Extension)');@(EXEScatterFile)" Outputs="@(EXEOutput)">
    <Exec WorkingDirectory="$(LIB_DIR)" Condition="'$(COMPILER_TOOL)'=='GCC'"    Command="$(LINK) $(LINK_FLAGS) -u ARM_Vectors -u _start --Map $(EXEName).map --output=@(EXEOutput) --script=@(EXEScatterFile,' ') @(EXEInputs,' ') -( @(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)%(FileName)%(Extension)',' ') @(DriverLibs->'%(FileName)%(Extension)',' ')  @(InputLibs,' ') -) -( &#x22;$(GNU_LIB_DIR)\libm.a&#x22; &#x22;$(GNU_LIB_DIR)\$(LIBCGCC)&#x22; &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC)&#x22; -) -( $(ExtraLibs) -)"/>
    <Exec WorkingDirectory="$(LIB_DIR)" Condition="'$(COMPILER_TOOL)'=='GCCOP'"  Command="$(LINK) $(LINK_FLAGS) -u ARM_Vectors -u _start --Map $(EXEName).map --output=@(EXEOutput) --script=@(EXEScatterFile,' ') @(EXEInputs,' ') -( @(PlatformInd    ependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)%(FileName)%(Extension)',' ') @(DriverLibs->'%(FileName)%(Extension)',' ')  @(InputLibs,' ') -) -( &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC)&#x22;  -) -( $(ExtraLibs) -)"/>

    <Exec Command="$(OBJDUMP) -d -EL @(EXEOutput) > $(EXEName).axfdump" />

    <MakeDir Directories="$(EXEName).bin" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).bin')" />
    <MakeDir Directories="$(EXEName).hex" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).hex')" />

    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM -j ER_RAM_RO -j ER_RAM_RW -j ER_CONFIG -O srec @(EXEOutput) $(EXEName).mot" />
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM -j ER_RAM_RO -j ER_RAM_RW -j ER_CONFIG -O ihex @(EXEOutput) $(EXEName).ihex" />

    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -O binary @(EXEOutput) $(EXEName).bin"                      Condition="'$(MultipleOutputSections)'!='true'" />
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -O binary @(EXEOutput) $(EXEName).bin\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                                                                     -O binary @(EXEOutput) $(EXEName).bin\ER_DAT"               Condition="'$(MultipleOutputSections)'=='true' and '$(ExcludeDatRegion)'!='true' and ('$(FLAVOR)'!='RTM' OR '$(Platform)'=='SAM9261_EK')" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                                                                  -O binary @(EXEOutput) $(EXEName).bin\ER_CONFIG"            Condition="'$(MultipleOutputSections)'=='true'" />

    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -j ER_IRAM -O srec --gap-fill 0 --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                                                                                -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_DAT"               Condition="'$(MultipleOutputSections)'=='true' and '$(ExcludeDatRegion)'!='true' and ('$(FLAVOR)'!='RTM' OR '$(Platform)'=='SAM9261_EK')" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                                                                             -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_CONFIG"            Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_IFLASH                                                                                             -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_IFLASH"            Condition="'$(MultipleOutputSections)'=='true'" />

    <Exec Command="$(NM) $(EXEName).axf >> $(EXEName).dump"/>
    <Exec Command="$(CREATESYMDEF)     $(EXEName).dump $(EXEName).symdefs" Condition="EXISTS('$(CREATESYMDEF)')" />
    <Exec Command="$(CREATESYMDEF_ALT) $(EXEName).dump $(EXEName).symdefs" Condition="!EXISTS('$(CREATESYMDEF)')" />

    <!--     echo adding LOAD_IMAGE_CRC value to $*.symdefs -->
    <Exec Condition="'$(ADD_LOAD_IMAGE_CRC)'=='true'" Command="$(TOOLS_DIR)\BuildHelper -hashBuild $(EXEName).bin$(ImageLocation) $(EXEName).symdefs" />
  </Target>

  <Target Name="Sh2BuildAXF" Condition="('$(INSTRUCTION_SET)'=='sh2' or '$(INSTRUCTION_SET)'=='sh2a') and '$(OutputType)'=='Executable'" DependsOnTargets="ShCompileCPP;ShCompileC;ShAssemble;$(ExtraEXETargets);BuildScatterfile" Inputs="@(EXEInputs);@(InputLibs);@(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)\%(FileName)%(Extension)');@(DriverLibs->'$(LIB_DIR)\%(FileName)%(Extension)');@(EXEScatterFile)" Outputs="@(EXEOutput)">
    <!-- 
        The GCC archiver does not support concatening libraries into a single one. The only way is to extract all the obj files then rearchive them altogether. 
        However, we probably want to consider using a BuildTask instead of using the following ugly script. 
    -->
    <Exec command="PrepareLibsForConcat.cmd $(LIB_DIR) @(DriverLibs,' ')" />
    <Exec Command="$(AR) $(ARFLAGS) $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT) $(LIB_DIR)\tmp\*.$(OBJ_EXT)" />
    <Exec Command="del $(LIB_DIR)\tmp\*.$(OBJ_EXT)" />
    <Exec Command="rmdir $(LIB_DIR)\tmp" />
    
    <Exec Condition="'$(COMPILER_TOOL)'=='GCC'" Command="$(LINK) $(LINK_FLAGS) -u _start --Map $(EXEName).map --output=@(EXEOutput) --script=@(EXEScatterFile,' ') @(EXEInputs,' ') -( @(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)%(FileName)%(Extension)',' ') $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT) @(InputLibs,' ') -) -( &#x22;$(GNU_LIB_DIR)\libm.a&#x22; &#x22;$(GNU_LIB_DIR)\libc.a&#x22; &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC)&#x22; &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC1)&#x22; -) -( $(ExtraLibs) -)"/>
    <Exec Command="del /q $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT)"/>    
    <Exec Command="$(OBJDUMP) -d -EB @(EXEOutput) > $(EXEName).axfdump" />
    <MakeDir Directories="$(EXEName).bin" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).bin')" />
    <MakeDir Directories="$(EXEName).hex" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).hex')" />
    <MakeDir Directories="$(EXEName).ihex" Condition="'$(MultipleOutputSections)'=='true' and '$(IntelHexFormat)'=='true' and !Exists('$(EXEName).ihex')" />


    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -O binary @(EXEOutput) $(EXEName).bin"                      Condition="'$(MultipleOutputSections)'!='true'" />
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -O binary @(EXEOutput) $(EXEName).bin\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                          -O binary @(EXEOutput) $(EXEName).bin\ER_DAT"    Condition="'$(MultipleOutputSections)'=='true' and ('$(FLAVOR)'!='RTM' OR '$(Platform)'=='SAM9261_EK')" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                                                                  -O binary @(EXEOutput) $(EXEName).bin\ER_CONFIG"            Condition="'$(MultipleOutputSections)'=='true'" />

    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -j ER_IRAM -O srec --gap-fill 0 --srec-forceS3  @(EXEOutput) $(EXEName).hex"                      Condition="'$(MultipleOutputSections)'!='true'" />
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -j ER_IRAM -O ihex --gap-fill 0                 @(EXEOutput) $(EXEName).ihex"                     Condition="'$(MultipleOutputSections)'!='true' and '$(IntelHexFormat)'=='true'" />

    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -j ER_IRAM -O srec --gap-fill 0 --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                          -O srec --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_DAT"                                              Condition="'$(MultipleOutputSections)'=='true' and ('$(FLAVOR)'!='RTM' OR '$(Platform)'=='SAM9261_EK')" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                                                                             -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_CONFIG"            Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_IFLASH                                                                                             -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_IFLASH"            Condition="'$(MultipleOutputSections)'=='true'" />


    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC  -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -j ER_IRAM -O ihex --gap-fill 0 @(EXEOutput) $(EXEName).ihex\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true' and '$(IntelHexFormat)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                                                                                 -O ihex              @(EXEOutput) $(EXEName).ihex\ER_DAT"               Condition="'$(MultipleOutputSections)'=='true' and '$(IntelHexFormat)'=='true' and ('$(FLAVOR)'!='RTM' OR '$(Platform)'=='SAM9261_EK') " />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                                                                              -O ihex              @(EXEOutput) $(EXEName).ihex\ER_CONFIG"            Condition="'$(MultipleOutputSections)'=='true' and '$(IntelHexFormat)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_IFLASH                                                                                              -O ihex              @(EXEOutput) $(EXEName).ihex\ER_IFLASH"            Condition="'$(MultipleOutputSections)'=='true' and '$(IntelHexFormat)'=='true'" />


    <!--     echo adding LOAD_IMAGE_CRC value to $*.symdefs -->
    <Exec Condition="'$(ADD_LOAD_IMAGE_CRC)'=='true'" Command="$(TOOLS_DIR)\BuildHelper -hashBuild $(EXEName).bin$(ImageLocation) $(EXEName).symdefs" />
  </Target>

  <Target Name="RxBuildAXF" Condition="('$(INSTRUCTION_SET)'=='rx62n' or '$(INSTRUCTION_SET)'=='rx63n') and '$(OutputType)'=='Executable'" DependsOnTargets="RxCompileCPP;RxCompileC;RxAssemble;$(ExtraEXETargets);BuildScatterfile" Inputs="@(EXEInputs);@(InputLibs);@(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)\%(FileName)%(Extension)');@(DriverLibs->'$(LIB_DIR)\%(FileName)%(Extension)');@(EXEScatterFile)" Outputs="@(EXEOutput)">
    <!-- 
        The GCC archiver does not support concatening libraries into a single one. The only way is to extract all the obj files then rearchive them altogether. 
        However, we probably want to consider using a BuildTask instead of using the following ugly script. 
      -->
    <Exec command="PrepareLibsForConcat.cmd $(LIB_DIR) @(DriverLibs,' ')" />
    <Exec Command="$(AR) $(ARFLAGS) $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT) $(LIB_DIR)\tmp\*.$(OBJ_EXT)" />
    <Exec Command="del $(LIB_DIR)\tmp\*.$(OBJ_EXT)" />
    <Exec Command="rmdir $(LIB_DIR)\tmp" />

    <!-- if TINYLIB == true then link only libm.a -->        
    <Exec Condition="'$(COMPILER_TOOL)'=='GCC' and '$(TINYLIB)'=='true'" Command="$(LINK) $(LINK_FLAGS) -u _start --Map $(EXEName).map --output=@(EXEOutput) --script=@(EXEScatterFile,' ') @(EXEInputs,' ') -( @(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)%(FileName)%(Extension)',' ') $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT) @(InputLibs,' ') -) -( &#x22;$(GNU_LIB_DIR)\libm.a&#x22;                                   &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC)&#x22; -) -( $(ExtraLibs) -)"/>
    <Exec Condition="'$(COMPILER_TOOL)'=='GCC' and '$(TINYLIB)'!='true'" Command="$(LINK) $(LINK_FLAGS) -u _start --Map $(EXEName).map --output=@(EXEOutput) --script=@(EXEScatterFile,' ') @(EXEInputs,' ') -( @(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)%(FileName)%(Extension)',' ') $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT) @(InputLibs,' ') -) -( &#x22;$(GNU_LIB_DIR)\libm.a&#x22; &#x22;$(GNU_LIB_DIR)\libc.a&#x22; &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC)&#x22; -) -( $(ExtraLibs) -)"/>
    <Exec Command="del /q $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT)"/>
    <Exec Command="$(OBJDUMP) -d -EL @(EXEOutput) > $(EXEName).axfdump" />
    <!-- create directory -->
    <MakeDir Directories="$(EXEName).bin" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).bin')" />
    <MakeDir Directories="$(EXEName).hex" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).hex')" />
    <!-- single file format -->
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW -j ER_CONFIG -j FVECTORS_TBL -O srec              @(EXEOutput) $(EXEName).mot" />
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW -j ER_CONFIG -j FVECTORS_TBL -O ihex --gap-fill 0 @(EXEOutput) $(EXEName).ihex" />
    <!-- bin format -->
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW  -O binary @(EXEOutput) $(EXEName).bin"                      Condition="'$(MultipleOutputSections)'!='true'" />
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW  -O binary @(EXEOutput) $(EXEName).bin\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                          -O binary @(EXEOutput) $(EXEName).bin\ER_DAT"    Condition="'$(MultipleOutputSections)'=='true' and '$(FLAVOR)'!='RTM'" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                       -O binary @(EXEOutput) $(EXEName).bin\ER_CONFIG" Condition="'$(MultipleOutputSections)'=='true'" />
    <!-- srec format -->
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW  -O srec --gap-fill 0 --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                          -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_DAT"               Condition="'$(MultipleOutputSections)'=='true' and '$(FLAVOR)'!='RTM'" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                       -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_CONFIG"            Condition="'$(MultipleOutputSections)'=='true'" />

    <!--     echo adding LOAD_IMAGE_CRC value to $*.symdefs -->
    <Exec Condition="'$(ADD_LOAD_IMAGE_CRC)'=='true'" Command="$(TOOLS_DIR)\BuildHelper -hashBuild $(EXEName).bin$(ImageLocation) $(EXEName).symdefs" />
  </Target>

  <Target Name="RzBuildAXF" Condition="('$(INSTRUCTION_SET)'=='rza1') and '$(OutputType)'=='Executable'" DependsOnTargets="RzCompileCPP;RzCompileC;RzAssemble;$(ExtraEXETargets);BuildScatterfile" Inputs="@(EXEInputs);@(InputLibs);@(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)\%(FileName)%(Extension)');@(DriverLibs->'$(LIB_DIR)\%(FileName)%(Extension)');@(EXEScatterFile)" Outputs="@(EXEOutput)">
    <!-- 
        The GCC archiver does not support concatening libraries into a single one. The only way is to extract all the obj files then rearchive them altogether. 
        However, we probably want to consider using a BuildTask instead of using the following ugly script. 
      -->
    <Exec command="PrepareLibsForConcat.cmd $(LIB_DIR) @(DriverLibs,' ')" />
    <Exec Command="$(AR) $(ARFLAGS) $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT) $(LIB_DIR)\tmp\*.$(OBJ_EXT)" />
    <Exec Command="del $(LIB_DIR)\tmp\*.$(OBJ_EXT)" />
    <Exec Command="rmdir $(LIB_DIR)\tmp" />

    <!-- if TINYLIB == true then link only libm.a -->        
    <Exec Condition="'$(COMPILER_TOOL)'=='GCC' and '$(TINYLIB)'=='true'" Command="$(LINK) $(LINK_FLAGS) -u start --Map $(EXEName).map --output=@(EXEOutput) --script=@(EXEScatterFile,' ') @(EXEInputs,' ') -( @(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)%(FileName)%(Extension)',' ') $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT) @(InputLibs,' ') -) -( &#x22;$(GNU_LIB_DIR)\libm.a&#x22;                                   &#x22;$(GNU_LIB_DIR)\libstdc++.a&#x22; &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC)&#x22; -) -( $(ExtraLibs) -)"/>
    <Exec Condition="'$(COMPILER_TOOL)'=='GCC' and '$(TINYLIB)'!='true'" Command="$(LINK) $(LINK_FLAGS) -u start --Map $(EXEName).map --output=@(EXEOutput) --script=@(EXEScatterFile,' ') @(EXEInputs,' ') -( @(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)%(FileName)%(Extension)',' ') $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT) @(InputLibs,' ') -) -( &#x22;$(GNU_LIB_DIR)\libm.a&#x22; &#x22;$(GNU_LIB_DIR)\libc.a&#x22; &#x22;$(GNU_LIB_DIR)\libstdc++.a&#x22; &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC)&#x22; -) -( $(ExtraLibs) -)"/>
    <Exec Command="del /q $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT)"/>    
    <Exec Command="$(OBJDUMP) -d -EL @(EXEOutput) > $(EXEName).axfdump" />
    <!-- create directory -->
    <MakeDir Directories="$(EXEName).bin" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).bin')" />
    <MakeDir Directories="$(EXEName).hex" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).hex')" />
    <!-- single file format -->
    <Exec Command="$(FROMELF) -S -j ER_BOOT_LOADER -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW -j ER_CONFIG -j FVECTORS_TBL -O srec              @(EXEOutput) $(EXEName).mot" />
    <Exec Command="$(FROMELF) -S -j ER_BOOT_LOADER -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW -j ER_CONFIG -j FVECTORS_TBL -O ihex --gap-fill 0 @(EXEOutput) $(EXEName).ihex" />
    <!-- bin format -->
    <Exec Command="$(FROMELF) -S -j ER_BOOT_LOADER -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW -j ER_CONFIG --gap-fill 0 -O binary @(EXEOutput) $(EXEName).bin"                      Condition="'$(MultipleOutputSections)'!='true'" />
    <Exec Command="$(FROMELF) -S -j ER_BOOT_LOADER -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW  -O binary @(EXEOutput) $(EXEName).bin\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                                            -O binary @(EXEOutput) $(EXEName).bin\ER_DAT"    Condition="'$(MultipleOutputSections)'=='true' and '$(FLAVOR)'!='RTM'" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                                         -O binary @(EXEOutput) $(EXEName).bin\ER_CONFIG" Condition="'$(MultipleOutputSections)'=='true'" />
    <!-- srec format -->
    <Exec Command="$(FROMELF) -S -j ER_BOOT_LOADER -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW  -O srec --gap-fill 0 --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                                            -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_DAT"               Condition="'$(MultipleOutputSections)'=='true' and '$(FLAVOR)'!='RTM'" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                                         -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_CONFIG"            Condition="'$(MultipleOutputSections)'=='true'" />

    <!--     echo adding LOAD_IMAGE_CRC value to $*.symdefs -->
    <Exec Condition="'$(ADD_LOAD_IMAGE_CRC)'=='true' and '$(MultipleOutputSections)'=='true'" Command="$(TOOLS_DIR)\BuildHelper -hashBuild $(EXEName).bin$(ImageLocation) $(EXEName).symdefs" />
  </Target>

  <Target Name="H8BuildAXF" Condition="'$(INSTRUCTION_SET)'=='h8' and '$(OutputType)'=='Executable'" DependsOnTargets="H8CompileCPP;H8CompileC;H8Assemble;$(ExtraEXETargets);BuildScatterfile" Inputs="@(EXEInputs);@(InputLibs);@(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)\%(FileName)%(Extension)');@(DriverLibs->'$(LIB_DIR)\%(FileName)%(Extension)');@(EXEScatterFile)" Outputs="@(EXEOutput)">
    <!-- 
        The GCC archiver does not support concatening libraries into a single one. The only way is to extract all the obj files then rearchive them altogether. 
        However, we probably want to consider using a BuildTask instead of using the following ugly script. 
      -->
    <Exec command="PrepareLibsForConcat.cmd $(LIB_DIR) @(DriverLibs,' ')" />
    <Exec Command="$(AR) $(ARFLAGS) $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT) $(LIB_DIR)\tmp\*.$(OBJ_EXT)" />
    <Exec Command="del $(LIB_DIR)\tmp\*.$(OBJ_EXT)" />
    <Exec Command="rmdir $(LIB_DIR)\tmp" />

    <!-- if TINYLIB == true then link only libm.a -->        
    <Exec Condition="'$(COMPILER_TOOL)'=='GCC' and '$(TINYLIB)'=='true'" Command="$(LINK) $(LINK_FLAGS) -u start --Map $(EXEName).map --output=@(EXEOutput) --script=@(EXEScatterFile,' ') @(EXEInputs,' ') -( @(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)%(FileName)%(Extension)',' ') $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT) @(InputLibs,' ') -) -( &#x22;$(GNU_LIB_DIR)\libm.a&#x22;                                   &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC)&#x22; -) -( $(ExtraLibs) -)"/>
    <Exec Condition="'$(COMPILER_TOOL)'=='GCC' and '$(TINYLIB)'!='true'" Command="$(LINK) $(LINK_FLAGS) -u start --Map $(EXEName).map --output=@(EXEOutput) --script=@(EXEScatterFile,' ') @(EXEInputs,' ') -( @(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)%(FileName)%(Extension)',' ') $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT) @(InputLibs,' ') -) -( &#x22;$(GNU_LIB_DIR)\libm.a&#x22; &#x22;$(GNU_LIB_DIR)\libc.a&#x22; &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC)&#x22; -) -( $(ExtraLibs) -)"/>
    <Exec Command="del /q $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT)"/>    
    <Exec Command="$(OBJDUMP) -d -EL @(EXEOutput) > $(EXEName).axfdump" />
    <!-- create directory -->
    <MakeDir Directories="$(EXEName).bin" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).bin')" />
    <MakeDir Directories="$(EXEName).hex" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).hex')" />
    <!-- single file format -->
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW -j ER_CONFIG -j FVECTORS_TBL -O srec              @(EXEOutput) $(EXEName).mot" />
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW -j ER_CONFIG -j FVECTORS_TBL -O ihex --gap-fill 0 @(EXEOutput) $(EXEName).ihex" />
    <!-- bin format -->
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW  -O binary @(EXEOutput) $(EXEName).bin"                      Condition="'$(MultipleOutputSections)'!='true'" />
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW  -O binary @(EXEOutput) $(EXEName).bin\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                          -O binary @(EXEOutput) $(EXEName).bin\ER_DAT"    Condition="'$(MultipleOutputSections)'=='true' and '$(FLAVOR)'!='RTM'" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                       -O binary @(EXEOutput) $(EXEName).bin\ER_CONFIG" Condition="'$(MultipleOutputSections)'=='true'" />
    <!-- srec format -->
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_RAM_RO -j ER_RAM_RW  -O srec --gap-fill 0 --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                          -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_DAT"               Condition="'$(MultipleOutputSections)'=='true' and '$(FLAVOR)'!='RTM'" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                       -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_CONFIG"            Condition="'$(MultipleOutputSections)'=='true'" />

    <!--     echo adding LOAD_IMAGE_CRC value to $*.symdefs -->
    <Exec Condition="'$(ADD_LOAD_IMAGE_CRC)'=='true'" Command="$(TOOLS_DIR)\BuildHelper -hashBuild $(EXEName).bin$(ImageLocation) $(EXEName).symdefs" />
  </Target>  
  
  <Target Name="BuildAXF" Condition="'$(OutputType)'=='Executable'" DependsOnTargets="ArmCompileCPP;ArmCompileC;ArmAssemble;$(ExtraEXETargets);BuildScatterfile" Inputs="@(EXEInputs);@(InputLibs);@(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)\%(FileName)%(Extension)');@(DriverLibs->'$(LIB_DIR)\%(FileName)%(Extension)');@(EXEScatterFile)" Outputs="@(EXEOutput)">
    <Exec WorkingDirectory="$(LIB_DIR)" Condition="'$(COMPILER_TOOL)'=='GCC'"    Command="$(LINK) $(LINK_FLAGS) -u ARM_Vectors -u _start --Map $(EXEName).map --output=@(EXEOutput) --script=@(EXEScatterFile,' ') @(EXEInputs,' ') -( @(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)%(FileName)%(Extension)',' ') @(DriverLibs->'%(FileName)%(Extension)',' ')  @(InputLibs,' ') -) -( &#x22;$(GNU_LIB_DIR)\libm.a&#x22; &#x22;$(GNU_LIB_DIR)\$(LIBCGCC)&#x22; &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC)&#x22; -) -( $(ExtraLibs) -)"/>
    <Exec WorkingDirectory="$(LIB_DIR)" Condition="'$(COMPILER_TOOL)'=='GCCOP'"  Command="$(LINK) $(LINK_FLAGS) -u ARM_Vectors -u _start --Map $(EXEName).map --output=@(EXEOutput) --script=@(EXEScatterFile,' ') @(EXEInputs,' ') -( @(PlatformInd	ependentLibs->'$(PLATFORM_INDEPENDENT_RELATIVE_LIB_DIR)%(FileName)%(Extension)',' ') @(DriverLibs->'%(FileName)%(Extension)',' ')  @(InputLibs,' ') -) -( &#x22;$(GNU_LIBGCC_DIR)\$(LIBGCC)&#x22;  -) -( $(ExtraLibs) -)"/>

    <Exec Command="$(OBJDUMP) -d -EL @(EXEOutput) > $(EXEName).axfdump" />

    <MakeDir Directories="$(EXEName).bin" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).bin')" />
    <MakeDir Directories="$(EXEName).hex" Condition="'$(MultipleOutputSections)'=='true' and !Exists('$(EXEName).hex')" />
    <MakeDir Directories="$(EXEName).ihex" Condition="'$(MultipleOutputSections)'=='true' and '$(IntelHexFormat)'=='true' and !Exists('$(EXEName).ihex')" />


    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -O binary @(EXEOutput) $(EXEName).bin"                      Condition="'$(MultipleOutputSections)'!='true'" />
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -O binary @(EXEOutput) $(EXEName).bin\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                                                                     -O binary @(EXEOutput) $(EXEName).bin\ER_DAT"               Condition="'$(MultipleOutputSections)'=='true' and '$(ExcludeDatRegion)'!='true' and ('$(FLAVOR)'!='RTM' OR '$(Platform)'=='SAM9261_EK')" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                                                                  -O binary @(EXEOutput) $(EXEName).bin\ER_CONFIG"            Condition="'$(MultipleOutputSections)'=='true'" />

    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -j ER_IRAM -O srec --gap-fill 0 --srec-forceS3  @(EXEOutput) $(EXEName).hex"                      Condition="'$(MultipleOutputSections)'!='true'" />
    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -j ER_IRAM -O ihex --gap-fill 0                 @(EXEOutput) $(EXEName).ihex"                     Condition="'$(MultipleOutputSections)'!='true' and '$(IntelHexFormat)'=='true'" />

    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -j ER_IRAM -O srec --gap-fill 0 --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                                                                                -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_DAT"               Condition="'$(MultipleOutputSections)'=='true' and '$(ExcludeDatRegion)'!='true' and ('$(FLAVOR)'!='RTM' OR '$(Platform)'=='SAM9261_EK')" />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                                                                             -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_CONFIG"            Condition="'$(MultipleOutputSections)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_IFLASH                                                                                             -O srec              --srec-forceS3  @(EXEOutput) $(EXEName).hex\ER_IFLASH"            Condition="'$(MultipleOutputSections)'=='true'" />


    <Exec Command="$(FROMELF) -S -j ER_$(TARGETLOCATION) -j ER_IRAM_TC  -j ER_$(TARGETLOCATION)_CONT -j ER_RAM_RO -j ER_RAM_RW  -j ER_IRAM -O ihex --gap-fill 0 @(EXEOutput) $(EXEName).ihex\ER_$(TARGETLOCATION)" Condition="'$(MultipleOutputSections)'=='true' and '$(IntelHexFormat)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_DAT                                                                                                 -O ihex              @(EXEOutput) $(EXEName).ihex\ER_DAT"               Condition="'$(MultipleOutputSections)'=='true' and '$(IntelHexFormat)'=='true' and ('$(FLAVOR)'!='RTM' OR '$(Platform)'=='SAM9261_EK') " />
    <Exec Command="$(FROMELF) -S -j ER_CONFIG                                                                                              -O ihex              @(EXEOutput) $(EXEName).ihex\ER_CONFIG"            Condition="'$(MultipleOutputSections)'=='true' and '$(IntelHexFormat)'=='true'" />
    <Exec Command="$(FROMELF) -S -j ER_IFLASH                                                                                              -O ihex              @(EXEOutput) $(EXEName).ihex\ER_IFLASH"            Condition="'$(MultipleOutputSections)'=='true' and '$(IntelHexFormat)'=='true'" />


    <Exec Command="$(NM) $(EXEName).axf >> $(EXEName).dump"/>
    <Exec Command="$(CREATESYMDEF)     $(EXEName).dump $(EXEName).symdefs" Condition="EXISTS('$(CREATESYMDEF)')" />
    <Exec Command="$(CREATESYMDEF_ALT) $(EXEName).dump $(EXEName).symdefs" Condition="!EXISTS('$(CREATESYMDEF)')" />

    <!--     echo adding LOAD_IMAGE_CRC value to $*.symdefs -->
    <Exec Condition="'$(ADD_LOAD_IMAGE_CRC)'=='true'" Command="$(TOOLS_DIR)\BuildHelper -hashBuild $(EXEName).bin$(ImageLocation) $(EXEName).symdefs" />
  </Target>

  <Target Name="FindBinFilesForSig" >
    <!-- create signature files-->
    <CreateItem
            Include="$(EXEName).bin\*"
            AdditionalMetadata="OutputDir=$(EXEName).hex\" >
      <Output
          TaskParameter="Include"
          ItemName="SigFilesInHexDir"/>
    </CreateItem>

    <CreateItem
            Include="$(EXEName).bin"
            Condition="'@(SigFilesInHexDir)'==''"
            AdditionalMetadata="OutputDir=$(BIN_DIR)\" >
      <Output
          TaskParameter="Include"
          ItemName="SigFiles"/>
    </CreateItem>

    <CreateItem
            Include="@(SigFilesInHexDir);@(SigFiles)">
      <Output
          TaskParameter="Include"
          ItemName="AllSigFiles"/>
    </CreateItem>

    <Exec Command="del /q $(EXEName).sig" Condition="Exists('$(EXEName).sig')" ContinueOnError="true"/>
    <Exec Command="del /q $(EXEName).hex\*.sig" Condition="'@(SigFilesInHexDir)'!=''"   ContinueOnError="true"/>

    <Message Text="file selected @(SigFilesInHexDir)"/>
    <Message Text="file selected @(SigFiles)"/>
    <Message Text="file selected @(AllSigFiles)"/>


  </Target>

  <Target Name="CompressBin" Inputs="@(CompressBinFile);@(CompressBinFile->'%(RootDir)%(Directory)%(FileName).symdefs')" Outputs="@(CompressBinOutput);@(CompressBinComp)" >
    <Exec Command="$(NM) @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).axf') >> @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).dump')"/>
    <Exec Command="$(CREATESYMDEF)     @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).dump') @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).symdefs')" Condition="EXISTS('$(CREATESYMDEF)')"/>
    <Exec Command="$(CREATESYMDEF_ALT) @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).dump') @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).symdefs')" Condition="!EXISTS('$(CREATESYMDEF)')"/>
    <Exec Command="$(TOOLS_DIR)\buildhelper -symdef @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).symdefs') EntryPoint -compress @(CompressBinFile) @(CompressBinComp)"/>
    <Exec Command="$(AS) $(AS_FLAGS) -I$(OBJ_DIR) -a=@(CompressBinOutput->'%(RootDir)%(Directory)%(FileName).txt') -o @(CompressBinOutput) @(CompressBinAsm)"/>
    <Exec Command="$(FROMELF) -I srec -O ihex  @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).hex') @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).ihex')" ContinueOnError="true"/>
<!--
    <Exec Command="del /q @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).hex')" ContinueOnError="true"/>
-->
  </Target>

  <Target Name="CompressBinSh" Inputs="@(CompressBinFile);@(CompressBinFile->'%(RootDir)%(Directory)%(FileName).symdefs')" Outputs="@(CompressBinOutput);@(CompressBinComp)" >
    <Exec Command="$(NM) @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).axf') >> @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).dump')"/>
    <Exec Command="$(TOOLS_DIR)\CreateSymdef @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).dump') @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).symdefs')"/>
    <Exec Command="$(TOOLS_DIR)\buildhelper -symdef @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).symdefs') EntryPoint -compress @(CompressBinFile) @(CompressBinComp)"/>
    <Exec Command="$(AS) $(AS_FLAGS) -I$(OBJ_DIR) -a=@(CompressBinOutput->'%(RootDir)%(Directory)%(FileName).txt') -o @(CompressBinOutput) @(CompressBinAsm)"/>
    <Exec Command="del /q @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).hex')" ContinueOnError="true"/>
  </Target>

  <Target Name="BuildSigFiles"
            Inputs="@(AllSigFiles)"
            Outputs="@(AllSigFiles->'%(OutputDir)%(FileName).sig')"
            DependsOnTargets="FindBinFilesForSig"
            Condition="EXISTS('$(SPO_SDK)\crypto\lib\x86\dll\crypto.dll')" >

    <Message Text="Create Signature files for @(AllSigFiles)"/>
    <Exec Condition="EXISTS('%(RelativeDir)%(AllSigFiles.Filename)%(Extension)')" Command="$(PRG_MMP) -sign_file %(RelativeDir)%(AllSigFiles.Filename)%(Extension) $(SPO_SDK)\tools\bin\tinybooter_private_key.bin %(AllSigFiles.Outputdir)%(AllSigFiles.Filename).sig"/>
  </Target>

  <ItemGroup>
    <BuildScatterFileProperties Include="SPOCLIENT=$(SPOCLIENT)" />
    <BuildScatterFileProperties Include="PROFILE_BUILD=$(TRUE)" Condition="'$(sampleprof)'=='true'" />
    <BuildScatterFileProperties Include="PLATFORM=$(PLATFORM)" />
    <BuildScatterFileProperties Include="TARGETCODEBASE=$(TARGETCODEBASE)" />
    <BuildScatterFileProperties Include="TARGETCODEBASETYPE=$(TARGETCODEBASETYPE)" />
    <BuildScatterFileProperties Include="TARGETPLATFORM=$(TARGETPLATFORM)" />
    <BuildScatterFileProperties Include="TARGETLOCATION=$(TARGETLOCATION)" />
    <BuildScatterFileProperties Include="TARGETTYPE=$(FLAVOR)" />
    <BuildScatterFileProperties Include="TARGETPROCESSOR=$(TARGETPROCESSOR)" />
    <BuildScatterFileProperties Include="ALTERNATEFLASHLOCATION=$(ALTERNATEFLASHLOCATION)" />
    <BuildScatterFileProperties Include="COMPILER_TOOL_VERSION=$(COMPILER_TOOL_VERSION)" />
    <BuildScatterFileProperties Include="COMPILER_TOOL=$(COMPILER_TOOL)" />
    <BuildScatterFileProperties Include="PROFILE_BUILD=$TRUE" Condition="'$(FLAVOR)'=='Instrumented'" />
  </ItemGroup>
  
  <Target Name="BuildScatterfile" Condition="'$(DEPEND)'!='ACTIVE'" Inputs="@(EXEScatterFileDefinition);@(ScatterFileReferences)" Outputs="@(EXEScatterFile)">
    <Message Text="..."/>    
    <ProcessScatterFile
    	Properties="@(BuildScatterFileProperties)"
		  DefinitionFile="@(EXEScatterfileDefinition)"
		  OutputFile="@(EXEScatterFile)"
     />
  </Target>

  <Target Name="TinyClrDat" Inputs="$(BIN_DIR)\tinyclr.dat;$(AS_SUBDIR)\tinyclr_dat.s" Outputs="$(OBJ_DIR)\tinyclr_dat.$(OBJ_EXT)">
    <Message                               Text="***************************************************************************************************"/>
    <Message Text="Target: TinyClrDat with outputs $(OBJ_DIR)\tinyclr_dat.$(OBJ_EXT)"/>
    <Message Condition="'$(FORCEDAT)'!=''" Text="Building Tinyclr.dat from $(BUILD_TREE_CLIENT)\dat\$(ENDIANNESS)\tinyclr_$(FORCEDAT).dat"/>
    <Message Condition="'$(FORCEDAT)'==''" Text="Building Tinyclr.dat from the features specified in the tinyclr.proj file"/>
    <Exec Condition="'$(FORCEDAT)'!='' AND EXISTS('$(BUILD_TREE_CLIENT)\dat\$(ENDIANNESS)\tinyclr_$(FORCEDAT).dat')" Command="copy /y $(BUILD_TREE_CLIENT)\dat\$(ENDIANNESS)\tinyclr_$(FORCEDAT).dat $(BIN_DIR)\tinyclr.dat" />
    <Exec Command="$(AS) -I$(BIN_DIR) $(AS_FLAGS) -a=$(OBJ_DIR)\tinyclr_dat.txt -o $(OBJ_DIR)\tinyclr_dat.$(OBJ_EXT) $(AS_SUBDIR)\tinyclr_dat.s"/>
    <Message                               Text="========== Database file content:"/>    
    <Exec Command="$(PRG_MMP) -dump_dat $(BIN_DIR)\tinyclr.dat" />
    <Message                               Text="========== End of Database file content"/>    
    <Message                               Text="***************************************************************************************************"/>
    <Exec Command="copy /BVY $(BIN_DIR)\tinyclr.dat $(BIN_DIR)\tinyclr.dat.fromlastbuildrun" />
    <Exec Command="del  /Q /F $(BIN_DIR)\tinyclr.dat"/>
  </Target>

</Project>
